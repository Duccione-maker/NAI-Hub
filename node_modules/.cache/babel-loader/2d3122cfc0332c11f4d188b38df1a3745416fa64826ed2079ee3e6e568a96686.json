{"ast":null,"code":"import api from './api';\n\n/**\r\n * Servizio per la gestione degli utenti e dei profili\r\n */\nconst userService = {\n  /**\r\n   * Ottiene il profilo dell'utente corrente\r\n   * @returns {Promise<Object>} Dati del profilo utente\r\n   */\n  getProfile: async () => {\n    return api.get('user/profile');\n  },\n  /**\r\n   * Aggiorna il profilo dell'utente\r\n   * @param {Object} profileData - Dati da aggiornare (level, progress, etc.)\r\n   * @returns {Promise<Object>} Profilo aggiornato\r\n   */\n  updateProfile: async profileData => {\n    return api.put('user/profile', profileData);\n  },\n  /**\r\n   * Ottiene lo storico dei progressi dell'utente\r\n   * @returns {Promise<Array>} Array di oggetti progresso\r\n   */\n  getProgress: async () => {\n    return api.get('user/progress');\n  },\n  /**\r\n   * Registra un nuovo progresso per l'utente\r\n   * @param {Object} progressData - Dati del progresso (activity, score, etc.)\r\n   * @returns {Promise<Object>} Oggetto progresso creato\r\n   */\n  saveProgress: async progressData => {\n    return api.post('user/progress', progressData);\n  },\n  /**\r\n   * Aggiorna il livello dell'utente in base all'assessment\r\n   * @param {string} level - Nuovo livello (A1, A2, B1, etc.)\r\n   * @returns {Promise<Object>} Profilo aggiornato\r\n   */\n  updateLevel: async level => {\n    return api.put('user/profile', {\n      level\n    });\n  }\n};\nexport default userService;","map":{"version":3,"names":["api","userService","getProfile","get","updateProfile","profileData","put","getProgress","saveProgress","progressData","post","updateLevel","level"],"sources":["C:/Users/Utente/lingua-kai-platform - restructured/src/services/userService.js"],"sourcesContent":["import api from './api';\r\n\r\n/**\r\n * Servizio per la gestione degli utenti e dei profili\r\n */\r\nconst userService = {\r\n  /**\r\n   * Ottiene il profilo dell'utente corrente\r\n   * @returns {Promise<Object>} Dati del profilo utente\r\n   */\r\n  getProfile: async () => {\r\n    return api.get('user/profile');\r\n  },\r\n\r\n  /**\r\n   * Aggiorna il profilo dell'utente\r\n   * @param {Object} profileData - Dati da aggiornare (level, progress, etc.)\r\n   * @returns {Promise<Object>} Profilo aggiornato\r\n   */\r\n  updateProfile: async (profileData) => {\r\n    return api.put('user/profile', profileData);\r\n  },\r\n\r\n  /**\r\n   * Ottiene lo storico dei progressi dell'utente\r\n   * @returns {Promise<Array>} Array di oggetti progresso\r\n   */\r\n  getProgress: async () => {\r\n    return api.get('user/progress');\r\n  },\r\n\r\n  /**\r\n   * Registra un nuovo progresso per l'utente\r\n   * @param {Object} progressData - Dati del progresso (activity, score, etc.)\r\n   * @returns {Promise<Object>} Oggetto progresso creato\r\n   */\r\n  saveProgress: async (progressData) => {\r\n    return api.post('user/progress', progressData);\r\n  },\r\n\r\n  /**\r\n   * Aggiorna il livello dell'utente in base all'assessment\r\n   * @param {string} level - Nuovo livello (A1, A2, B1, etc.)\r\n   * @returns {Promise<Object>} Profilo aggiornato\r\n   */\r\n  updateLevel: async (level) => {\r\n    return api.put('user/profile', { level });\r\n  }\r\n};\r\n\r\nexport default userService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA;AACA;AACA,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;AACA;EACEC,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,OAAOF,GAAG,CAACG,GAAG,CAAC,cAAc,CAAC;EAChC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,aAAa,EAAE,MAAOC,WAAW,IAAK;IACpC,OAAOL,GAAG,CAACM,GAAG,CAAC,cAAc,EAAED,WAAW,CAAC;EAC7C,CAAC;EAED;AACF;AACA;AACA;EACEE,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,OAAOP,GAAG,CAACG,GAAG,CAAC,eAAe,CAAC;EACjC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEK,YAAY,EAAE,MAAOC,YAAY,IAAK;IACpC,OAAOT,GAAG,CAACU,IAAI,CAAC,eAAe,EAAED,YAAY,CAAC;EAChD,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,WAAW,EAAE,MAAOC,KAAK,IAAK;IAC5B,OAAOZ,GAAG,CAACM,GAAG,CAAC,cAAc,EAAE;MAAEM;IAAM,CAAC,CAAC;EAC3C;AACF,CAAC;AAED,eAAeX,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}