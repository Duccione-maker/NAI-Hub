{"ast":null,"code":"// Mock Question Service per Test QCER\n// Sistema Ibrido: Pattern + AI + Fallback\n\n// LAYER 1: Database Pattern Grammaticali (80% dei casi)\nconst grammarPatterns = {\n  articoli: [{\n    error: /\\bil\\s+(casa|scuola|famiglia|università|amica|idea|auto)/gi,\n    correct: \"la\",\n    weight: 0.8,\n    level: \"A1\"\n  }, {\n    error: /\\bla\\s+(uomo|bambino|libro|computer|telefono|quaderno)/gi,\n    correct: \"il/l'\",\n    weight: 0.8,\n    level: \"A1\"\n  }, {\n    error: /\\bun\\s+(amica|università|idea|auto|aula)/gi,\n    correct: \"un'\",\n    weight: 0.8,\n    level: \"A1\"\n  }, {\n    error: /\\buno\\s+(scuola|casa|penna|pizza)/gi,\n    correct: \"una\",\n    weight: 0.8,\n    level: \"A1\"\n  }],\n  concordanze: [{\n    error: /\\bmio\\s+(famiglia|sorella|amica|scuola|casa)/gi,\n    correct: \"mia\",\n    weight: 0.9,\n    level: \"A1\"\n  }, {\n    error: /\\bmia\\s+(fratello|amico|libro|quaderno)/gi,\n    correct: \"mio\",\n    weight: 0.9,\n    level: \"A1\"\n  }, {\n    error: /\\b(il|la)\\s+(\\w+)o\\s+(bella|grande|piccola|buona)/gi,\n    rule: \"aggettivo_femminile_con_nome_maschile\",\n    weight: 0.7,\n    level: \"A2\"\n  }, {\n    error: /\\b(questi|quelle)\\s+(\\w+)(o|a)\\b/gi,\n    rule: \"dimostrativi_sbagliati\",\n    weight: 0.6,\n    level: \"A2\"\n  }],\n  verbi: [{\n    error: /\\bio\\s+(sei|è|sono|siamo)/gi,\n    correct: \"sono\",\n    weight: 0.7,\n    level: \"A1\"\n  }, {\n    error: /\\bho\\s+(andato|venuto|partito|arrivato)/gi,\n    correct: \"sono\",\n    weight: 0.8,\n    level: \"A1\"\n  }, {\n    error: /\\bio\\s+no\\s+/gi,\n    correct: \"non\",\n    weight: 0.6,\n    level: \"A1\"\n  }, {\n    error: /\\b(per|di)\\s+(\\w+)(are|ere|ire)\\b/gi,\n    correct: \"infinito_corretto\",\n    weight: 0.5,\n    level: \"A1\"\n  }, {\n    error: /\\bcapisce\\s+poco/gi,\n    correct: \"capisco poco\",\n    weight: 0.6,\n    level: \"A1\"\n  }],\n  preposizioni: [{\n    error: /\\bper\\s+studia/gi,\n    correct: \"per studiare\",\n    weight: 0.7,\n    level: \"A1\"\n  }, {\n    error: /\\ba\\s+casa\\s+di\\s+me/gi,\n    correct: \"a casa mia\",\n    weight: 0.5,\n    level: \"A2\"\n  }, {\n    error: /\\bin\\s+il\\s+/gi,\n    correct: \"nel\",\n    weight: 0.6,\n    level: \"A1\"\n  }]\n};\n\n// LAYER 1: Scansione Pattern (veloce, gratis, preciso)\nconst scanGrammarPatterns = text => {\n  const errors = [];\n  let totalErrorWeight = 0;\n  let patternMatches = 0;\n  Object.keys(grammarPatterns).forEach(category => {\n    grammarPatterns[category].forEach(pattern => {\n      const matches = text.match(pattern.error);\n      if (matches) {\n        matches.forEach(match => {\n          errors.push({\n            type: category,\n            match: match.trim(),\n            correction: pattern.correct,\n            weight: pattern.weight,\n            level: pattern.level\n          });\n          totalErrorWeight += pattern.weight;\n          patternMatches++;\n        });\n      }\n    });\n  });\n\n  // Calcola confidence del pattern matching\n  const textComplexity = text.split(/\\s+/).length;\n  const patternCoverage = patternMatches / Math.max(textComplexity / 10, 1);\n  const confidence = Math.min(patternCoverage * 0.8 + 0.2, 1.0);\n  return {\n    errors,\n    totalErrorWeight,\n    confidence,\n    patternMatches,\n    category: 'pattern_analysis'\n  };\n};\n\n// LAYER 2: AI Analysis (per casi complessi)\nconst analyzeWithAI = async text => {\n  // Simulazione AI analysis (sostituire con vera API quando disponibile)\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const wordCount = text.split(/\\s+/).length;\n      const hasComplexStructures = /che|quando|mentre|perché|sebbene/gi.test(text);\n      let aiScore = 40; // Base score\n      if (hasComplexStructures) aiScore += 20;\n      if (wordCount > 50) aiScore += 15;\n      resolve({\n        score: aiScore,\n        confidence: 0.75,\n        analysis: \"AI detected intermediate complexity\",\n        category: 'ai_analysis'\n      });\n    }, 100);\n  });\n};\n\n// LAYER 3: Fallback Heuristic (sempre funziona)\nconst basicHeuristic = text => {\n  const wordCount = text.trim().split(/\\s+/).length;\n  const sentenceCount = (text.match(/[.!?]+/g) || []).length || 1;\n  const avgWordsPerSentence = wordCount / sentenceCount;\n  let score = 25; // Base A1 score\n\n  // Bonus per lunghezza appropriata\n  if (wordCount >= 20 && wordCount <= 100) score += 15;\n  if (wordCount > 100) score += 20;\n\n  // Bonus per struttura delle frasi\n  if (avgWordsPerSentence >= 5 && avgWordsPerSentence <= 15) score += 10;\n  return {\n    score: Math.min(score, 95),\n    confidence: 0.6,\n    analysis: `Heuristic: ${wordCount} words, ${sentenceCount} sentences`,\n    category: 'fallback_heuristic'\n  };\n};\n\n// SISTEMA IBRIDO PRINCIPALE\nconst HybridEvaluator = {\n  evaluateWriting: async (text, targetLevel = 'A1') => {\n    console.log(`🔍 === VALUTAZIONE IBRIDA INIZIATA ===`);\n    console.log(`📝 Testo: \"${text.substring(0, 50)}...\"`);\n\n    // LAYER 1: Pattern Matching\n    const patternResult = scanGrammarPatterns(text);\n    console.log(`🎯 Pattern Analysis - Confidence: ${(patternResult.confidence * 100).toFixed(1)}%`);\n    console.log(`❌ Errori trovati: ${patternResult.errors.length}`);\n    patternResult.errors.forEach(error => {\n      console.log(`   - ${error.type}: \"${error.match}\" → \"${error.correction}\" (peso: ${error.weight})`);\n    });\n\n    // Se alta confidence, usa pattern result\n    if (patternResult.confidence > 0.8) {\n      const score = Math.max(50 - patternResult.totalErrorWeight * 25, 15);\n      console.log(`✅ Pattern matching decisivo - Score: ${score}%`);\n      return {\n        score,\n        errors: patternResult.errors,\n        method: 'pattern_matching',\n        confidence: patternResult.confidence,\n        analysis: `Pattern-based: ${patternResult.errors.length} errori rilevati`\n      };\n    }\n\n    // LAYER 2: AI Analysis (per casi complessi)\n    console.log(`🤖 Ricorso ad AI Analysis...`);\n    try {\n      const aiResult = await analyzeWithAI(text);\n      console.log(`🎯 AI Analysis - Score: ${aiResult.score}%`);\n\n      // Combina pattern + AI se entrambi disponibili\n      if (patternResult.errors.length > 0) {\n        const combinedScore = aiResult.score * 0.7 + (50 - patternResult.totalErrorWeight * 20) * 0.3;\n        return {\n          score: Math.max(combinedScore, 15),\n          errors: patternResult.errors,\n          method: 'pattern_ai_hybrid',\n          confidence: (patternResult.confidence + aiResult.confidence) / 2,\n          analysis: `Hybrid: AI + ${patternResult.errors.length} pattern errors`\n        };\n      }\n      return aiResult;\n    } catch (error) {\n      console.log(`⚠️ AI fallito, ricorso ad Heuristic...`);\n    }\n\n    // LAYER 3: Fallback Heuristic\n    const fallbackResult = basicHeuristic(text);\n    console.log(`🔧 Fallback Heuristic - Score: ${fallbackResult.score}%`);\n\n    // Applica penalità pattern se trovati errori\n    if (patternResult.errors.length > 0) {\n      fallbackResult.score = Math.max(fallbackResult.score - patternResult.totalErrorWeight * 15, 10);\n      fallbackResult.errors = patternResult.errors;\n    }\n    return fallbackResult;\n  }\n};\n\n// Database domande esistente\nconst mockQuestionBank = {\n  demographic: [{\n    id: 'years_italy',\n    type: 'multiple_choice',\n    question: 'Da quanti anni sei in Italia?',\n    options: [{\n      value: 'less1',\n      text: 'Meno di 1 anno'\n    }, {\n      value: '1to3',\n      text: '1-3 anni'\n    }, {\n      value: '3to5',\n      text: '3-5 anni'\n    }, {\n      value: 'more5',\n      text: 'Più di 5 anni'\n    }]\n  }, {\n    id: 'italian_classes',\n    type: 'multiple_choice',\n    question: 'Hai mai frequentato corsi di italiano?',\n    options: [{\n      value: 'never',\n      text: 'Mai'\n    }, {\n      value: 'informal',\n      text: 'Solo informalmente'\n    }, {\n      value: 'some',\n      text: 'Qualche corso'\n    }, {\n      value: 'regular',\n      text: 'Corsi regolari'\n    }]\n  }],\n  reading: [{\n    id: 'simple_text',\n    level: 'A1',\n    text: \"Ciao! Mi chiamo Marco e ho 25 anni. Sono di Roma ma ora vivo a Milano per lavoro. La mattina prendo sempre un caffè al bar vicino casa. Mi piace molto la pizza e il calcio. Nel weekend vado spesso al cinema con i miei amici.\",\n    questions: [{\n      id: 'q1',\n      question: \"Come si chiama la persona?\",\n      options: [\"Mario\", \"Marco\", \"Michele\", \"Matteo\"],\n      correct: 1\n    }, {\n      id: 'q2',\n      question: \"Dove vive ora?\",\n      options: [\"Roma\", \"Napoli\", \"Milano\", \"Torino\"],\n      correct: 2\n    }, {\n      id: 'q3',\n      question: \"Cosa prende al bar?\",\n      options: [\"Tè\", \"Cappuccino\", \"Caffè\", \"Succo\"],\n      correct: 2\n    }]\n  }],\n  grammar: [{\n    id: 'articles',\n    level: 'A1',\n    question: \"Completa: ___ casa è molto bella\",\n    options: [\"Il\", \"La\", \"Lo\", \"Le\"],\n    correct: 1,\n    explanation: \"Casa è femminile singolare, quindi si usa 'la'\"\n  }, {\n    id: 'verbs',\n    level: 'A1',\n    question: \"Io ___ italiano\",\n    options: [\"è\", \"sei\", \"sono\", \"siamo\"],\n    correct: 2,\n    explanation: \"Con 'io' si usa 'sono'\"\n  }],\n  writing: [{\n    id: 'self_introduction',\n    level: 'A1',\n    prompt: \"Scrivi una breve presentazione di te stesso (nome, età, da dove vieni, cosa ti piace fare). Minimo 30 parole.\",\n    minWords: 30,\n    maxWords: 100\n  }],\n  speaking: [{\n    id: 'personal_info',\n    level: 'A1',\n    prompt: \"Parlami di te: come ti chiami, quanti anni hai, da dove vieni e cosa fai nella vita quotidiana.\",\n    duration: 60,\n    preparationTime: 30\n  }]\n};\n\n// Mock AI Services\nexport const MockQuestionService = {\n  getQuestionsBySection: section => {\n    return Promise.resolve(mockQuestionBank[section] || []);\n  },\n  // SISTEMA IBRIDO INTEGRATO\n  evaluateWriting: async (text, level) => {\n    return await HybridEvaluator.evaluateWriting(text, level);\n  },\n  evaluateSpeaking: async (audioBlob, level) => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const duration = 30;\n        let score = 40;\n        if (duration > 20) score += 15;\n        if (duration > 40) score += 20;\n        resolve({\n          score: Math.min(score + Math.random() * 20, 95),\n          feedback: \"Pronuncia comprensibile, ritmo appropriato per il livello\",\n          duration: duration\n        });\n      }, 1000);\n    });\n  },\n  submitResults: async results => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        console.log('📊 Risultati salvati:', results);\n        resolve({\n          success: true,\n          id: Date.now()\n        });\n      }, 500);\n    });\n  }\n};\n\n// Algoritmo di scoring QCER con debug dettagliato\nexport const QCERScoring = {\n  calculateLevel: scores => {\n    console.log(`🎯 === RISULTATI DETTAGLIATI TEST QCER ===`);\n    console.log(`📖 Lettura/Comprensione: ${scores.reading.toFixed(1)}%`);\n    console.log(`📝 Grammatica: ${scores.grammar.toFixed(1)}%`);\n    console.log(`✍️ Scrittura: ${scores.writing.toFixed(1)}%`);\n    console.log(`🗣️ Parlato: ${scores.speaking.toFixed(1)}%`);\n    const weights = {\n      reading: 0.25,\n      grammar: 0.25,\n      writing: 0.3,\n      speaking: 0.2\n    };\n    const totalScore = scores.reading * weights.reading + scores.grammar * weights.grammar + scores.writing * weights.writing + scores.speaking * weights.speaking;\n    console.log(`🎯 Punteggio Totale: ${totalScore.toFixed(1)}%`);\n    const levels = {\n      'A1': {\n        min: 0,\n        max: 32,\n        belt: 'yellow'\n      },\n      'A2': {\n        min: 32,\n        max: 52,\n        belt: 'orange'\n      },\n      'B1': {\n        min: 52,\n        max: 68,\n        belt: 'green'\n      },\n      'B2': {\n        min: 68,\n        max: 82,\n        belt: 'blue'\n      },\n      'C1': {\n        min: 82,\n        max: 92,\n        belt: 'brown'\n      },\n      'C2': {\n        min: 92,\n        max: 100,\n        belt: 'black'\n      }\n    };\n    let assignedLevel = 'A1';\n    for (const [level, range] of Object.entries(levels)) {\n      if (totalScore >= range.min && totalScore < range.max) {\n        assignedLevel = level;\n        break;\n      }\n    }\n    console.log(`🥋 Livello Assegnato: ${assignedLevel}`);\n    console.log(`🔍 Mapping: A1(0-32%), A2(32-52%), B1(52-68%), B2(68-82%), C1(82-92%), C2(92%+)`);\n    return {\n      level: assignedLevel,\n      score: totalScore,\n      belt: levels[assignedLevel].belt,\n      breakdown: scores\n    };\n  }\n};","map":{"version":3,"names":["grammarPatterns","articoli","error","correct","weight","level","concordanze","rule","verbi","preposizioni","scanGrammarPatterns","text","errors","totalErrorWeight","patternMatches","Object","keys","forEach","category","pattern","matches","match","push","type","trim","correction","textComplexity","split","length","patternCoverage","Math","max","confidence","min","analyzeWithAI","Promise","resolve","setTimeout","wordCount","hasComplexStructures","test","aiScore","score","analysis","basicHeuristic","sentenceCount","avgWordsPerSentence","HybridEvaluator","evaluateWriting","targetLevel","console","log","substring","patternResult","toFixed","method","aiResult","combinedScore","fallbackResult","mockQuestionBank","demographic","id","question","options","value","reading","questions","grammar","explanation","writing","prompt","minWords","maxWords","speaking","duration","preparationTime","MockQuestionService","getQuestionsBySection","section","evaluateSpeaking","audioBlob","random","feedback","submitResults","results","success","Date","now","QCERScoring","calculateLevel","scores","weights","totalScore","levels","belt","assignedLevel","range","entries","breakdown"],"sources":["C:/Users/Utente/lingua-kai-platform - restructured/src/components/components/TestIngresso/MockQuestionService.js"],"sourcesContent":["// Mock Question Service per Test QCER\r\n// Sistema Ibrido: Pattern + AI + Fallback\r\n\r\n// LAYER 1: Database Pattern Grammaticali (80% dei casi)\r\nconst grammarPatterns = {\r\n  articoli: [\r\n    { error: /\\bil\\s+(casa|scuola|famiglia|università|amica|idea|auto)/gi, correct: \"la\", weight: 0.8, level: \"A1\" },\r\n    { error: /\\bla\\s+(uomo|bambino|libro|computer|telefono|quaderno)/gi, correct: \"il/l'\", weight: 0.8, level: \"A1\" },\r\n    { error: /\\bun\\s+(amica|università|idea|auto|aula)/gi, correct: \"un'\", weight: 0.8, level: \"A1\" },\r\n    { error: /\\buno\\s+(scuola|casa|penna|pizza)/gi, correct: \"una\", weight: 0.8, level: \"A1\" }\r\n  ],\r\n  \r\n  concordanze: [\r\n    { error: /\\bmio\\s+(famiglia|sorella|amica|scuola|casa)/gi, correct: \"mia\", weight: 0.9, level: \"A1\" },\r\n    { error: /\\bmia\\s+(fratello|amico|libro|quaderno)/gi, correct: \"mio\", weight: 0.9, level: \"A1\" },\r\n    { error: /\\b(il|la)\\s+(\\w+)o\\s+(bella|grande|piccola|buona)/gi, rule: \"aggettivo_femminile_con_nome_maschile\", weight: 0.7, level: \"A2\" },\r\n    { error: /\\b(questi|quelle)\\s+(\\w+)(o|a)\\b/gi, rule: \"dimostrativi_sbagliati\", weight: 0.6, level: \"A2\" }\r\n  ],\r\n  \r\n  verbi: [\r\n    { error: /\\bio\\s+(sei|è|sono|siamo)/gi, correct: \"sono\", weight: 0.7, level: \"A1\" },\r\n    { error: /\\bho\\s+(andato|venuto|partito|arrivato)/gi, correct: \"sono\", weight: 0.8, level: \"A1\" },\r\n    { error: /\\bio\\s+no\\s+/gi, correct: \"non\", weight: 0.6, level: \"A1\" },\r\n    { error: /\\b(per|di)\\s+(\\w+)(are|ere|ire)\\b/gi, correct: \"infinito_corretto\", weight: 0.5, level: \"A1\" },\r\n    { error: /\\bcapisce\\s+poco/gi, correct: \"capisco poco\", weight: 0.6, level: \"A1\" }\r\n  ],\r\n\r\n  preposizioni: [\r\n    { error: /\\bper\\s+studia/gi, correct: \"per studiare\", weight: 0.7, level: \"A1\" },\r\n    { error: /\\ba\\s+casa\\s+di\\s+me/gi, correct: \"a casa mia\", weight: 0.5, level: \"A2\" },\r\n    { error: /\\bin\\s+il\\s+/gi, correct: \"nel\", weight: 0.6, level: \"A1\" }\r\n  ]\r\n};\r\n\r\n// LAYER 1: Scansione Pattern (veloce, gratis, preciso)\r\nconst scanGrammarPatterns = (text) => {\r\n  const errors = [];\r\n  let totalErrorWeight = 0;\r\n  let patternMatches = 0;\r\n\r\n  Object.keys(grammarPatterns).forEach(category => {\r\n    grammarPatterns[category].forEach(pattern => {\r\n      const matches = text.match(pattern.error);\r\n      if (matches) {\r\n        matches.forEach(match => {\r\n          errors.push({\r\n            type: category,\r\n            match: match.trim(),\r\n            correction: pattern.correct,\r\n            weight: pattern.weight,\r\n            level: pattern.level\r\n          });\r\n          totalErrorWeight += pattern.weight;\r\n          patternMatches++;\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // Calcola confidence del pattern matching\r\n  const textComplexity = text.split(/\\s+/).length;\r\n  const patternCoverage = patternMatches / Math.max(textComplexity / 10, 1);\r\n  const confidence = Math.min(patternCoverage * 0.8 + 0.2, 1.0);\r\n\r\n  return {\r\n    errors,\r\n    totalErrorWeight,\r\n    confidence,\r\n    patternMatches,\r\n    category: 'pattern_analysis'\r\n  };\r\n};\r\n\r\n// LAYER 2: AI Analysis (per casi complessi)\r\nconst analyzeWithAI = async (text) => {\r\n  // Simulazione AI analysis (sostituire con vera API quando disponibile)\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      const wordCount = text.split(/\\s+/).length;\r\n      const hasComplexStructures = /che|quando|mentre|perché|sebbene/gi.test(text);\r\n      \r\n      let aiScore = 40; // Base score\r\n      if (hasComplexStructures) aiScore += 20;\r\n      if (wordCount > 50) aiScore += 15;\r\n      \r\n      resolve({\r\n        score: aiScore,\r\n        confidence: 0.75,\r\n        analysis: \"AI detected intermediate complexity\",\r\n        category: 'ai_analysis'\r\n      });\r\n    }, 100);\r\n  });\r\n};\r\n\r\n// LAYER 3: Fallback Heuristic (sempre funziona)\r\nconst basicHeuristic = (text) => {\r\n  const wordCount = text.trim().split(/\\s+/).length;\r\n  const sentenceCount = (text.match(/[.!?]+/g) || []).length || 1;\r\n  const avgWordsPerSentence = wordCount / sentenceCount;\r\n  \r\n  let score = 25; // Base A1 score\r\n  \r\n  // Bonus per lunghezza appropriata\r\n  if (wordCount >= 20 && wordCount <= 100) score += 15;\r\n  if (wordCount > 100) score += 20;\r\n  \r\n  // Bonus per struttura delle frasi\r\n  if (avgWordsPerSentence >= 5 && avgWordsPerSentence <= 15) score += 10;\r\n  \r\n  return {\r\n    score: Math.min(score, 95),\r\n    confidence: 0.6,\r\n    analysis: `Heuristic: ${wordCount} words, ${sentenceCount} sentences`,\r\n    category: 'fallback_heuristic'\r\n  };\r\n};\r\n\r\n// SISTEMA IBRIDO PRINCIPALE\r\nconst HybridEvaluator = {\r\n  evaluateWriting: async (text, targetLevel = 'A1') => {\r\n    console.log(`🔍 === VALUTAZIONE IBRIDA INIZIATA ===`);\r\n    console.log(`📝 Testo: \"${text.substring(0, 50)}...\"`);\r\n    \r\n    // LAYER 1: Pattern Matching\r\n    const patternResult = scanGrammarPatterns(text);\r\n    console.log(`🎯 Pattern Analysis - Confidence: ${(patternResult.confidence * 100).toFixed(1)}%`);\r\n    console.log(`❌ Errori trovati: ${patternResult.errors.length}`);\r\n    \r\n    patternResult.errors.forEach(error => {\r\n      console.log(`   - ${error.type}: \"${error.match}\" → \"${error.correction}\" (peso: ${error.weight})`);\r\n    });\r\n\r\n    // Se alta confidence, usa pattern result\r\n    if (patternResult.confidence > 0.8) {\r\n      const score = Math.max(50 - (patternResult.totalErrorWeight * 25), 15);\r\n      console.log(`✅ Pattern matching decisivo - Score: ${score}%`);\r\n      return {\r\n        score,\r\n        errors: patternResult.errors,\r\n        method: 'pattern_matching',\r\n        confidence: patternResult.confidence,\r\n        analysis: `Pattern-based: ${patternResult.errors.length} errori rilevati`\r\n      };\r\n    }\r\n\r\n    // LAYER 2: AI Analysis (per casi complessi)\r\n    console.log(`🤖 Ricorso ad AI Analysis...`);\r\n    try {\r\n      const aiResult = await analyzeWithAI(text);\r\n      console.log(`🎯 AI Analysis - Score: ${aiResult.score}%`);\r\n      \r\n      // Combina pattern + AI se entrambi disponibili\r\n      if (patternResult.errors.length > 0) {\r\n        const combinedScore = (aiResult.score * 0.7) + ((50 - patternResult.totalErrorWeight * 20) * 0.3);\r\n        return {\r\n          score: Math.max(combinedScore, 15),\r\n          errors: patternResult.errors,\r\n          method: 'pattern_ai_hybrid',\r\n          confidence: (patternResult.confidence + aiResult.confidence) / 2,\r\n          analysis: `Hybrid: AI + ${patternResult.errors.length} pattern errors`\r\n        };\r\n      }\r\n      \r\n      return aiResult;\r\n    } catch (error) {\r\n      console.log(`⚠️ AI fallito, ricorso ad Heuristic...`);\r\n    }\r\n\r\n    // LAYER 3: Fallback Heuristic\r\n    const fallbackResult = basicHeuristic(text);\r\n    console.log(`🔧 Fallback Heuristic - Score: ${fallbackResult.score}%`);\r\n    \r\n    // Applica penalità pattern se trovati errori\r\n    if (patternResult.errors.length > 0) {\r\n      fallbackResult.score = Math.max(fallbackResult.score - (patternResult.totalErrorWeight * 15), 10);\r\n      fallbackResult.errors = patternResult.errors;\r\n    }\r\n    \r\n    return fallbackResult;\r\n  }\r\n};\r\n\r\n// Database domande esistente\r\nconst mockQuestionBank = {\r\n  demographic: [\r\n    {\r\n      id: 'years_italy',\r\n      type: 'multiple_choice',\r\n      question: 'Da quanti anni sei in Italia?',\r\n      options: [\r\n        { value: 'less1', text: 'Meno di 1 anno' },\r\n        { value: '1to3', text: '1-3 anni' },\r\n        { value: '3to5', text: '3-5 anni' },\r\n        { value: 'more5', text: 'Più di 5 anni' }\r\n      ]\r\n    },\r\n    {\r\n      id: 'italian_classes',\r\n      type: 'multiple_choice',\r\n      question: 'Hai mai frequentato corsi di italiano?',\r\n      options: [\r\n        { value: 'never', text: 'Mai' },\r\n        { value: 'informal', text: 'Solo informalmente' },\r\n        { value: 'some', text: 'Qualche corso' },\r\n        { value: 'regular', text: 'Corsi regolari' }\r\n      ]\r\n    }\r\n  ],\r\n\r\n  reading: [\r\n    {\r\n      id: 'simple_text',\r\n      level: 'A1',\r\n      text: \"Ciao! Mi chiamo Marco e ho 25 anni. Sono di Roma ma ora vivo a Milano per lavoro. La mattina prendo sempre un caffè al bar vicino casa. Mi piace molto la pizza e il calcio. Nel weekend vado spesso al cinema con i miei amici.\",\r\n      questions: [\r\n        {\r\n          id: 'q1',\r\n          question: \"Come si chiama la persona?\",\r\n          options: [\"Mario\", \"Marco\", \"Michele\", \"Matteo\"],\r\n          correct: 1\r\n        },\r\n        {\r\n          id: 'q2', \r\n          question: \"Dove vive ora?\",\r\n          options: [\"Roma\", \"Napoli\", \"Milano\", \"Torino\"],\r\n          correct: 2\r\n        },\r\n        {\r\n          id: 'q3',\r\n          question: \"Cosa prende al bar?\",\r\n          options: [\"Tè\", \"Cappuccino\", \"Caffè\", \"Succo\"],\r\n          correct: 2\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n\r\n  grammar: [\r\n    {\r\n      id: 'articles',\r\n      level: 'A1',\r\n      question: \"Completa: ___ casa è molto bella\",\r\n      options: [\"Il\", \"La\", \"Lo\", \"Le\"],\r\n      correct: 1,\r\n      explanation: \"Casa è femminile singolare, quindi si usa 'la'\"\r\n    },\r\n    {\r\n      id: 'verbs',\r\n      level: 'A1', \r\n      question: \"Io ___ italiano\",\r\n      options: [\"è\", \"sei\", \"sono\", \"siamo\"],\r\n      correct: 2,\r\n      explanation: \"Con 'io' si usa 'sono'\"\r\n    }\r\n  ],\r\n\r\n  writing: [\r\n    {\r\n      id: 'self_introduction',\r\n      level: 'A1',\r\n      prompt: \"Scrivi una breve presentazione di te stesso (nome, età, da dove vieni, cosa ti piace fare). Minimo 30 parole.\",\r\n      minWords: 30,\r\n      maxWords: 100\r\n    }\r\n  ],\r\n\r\n  speaking: [\r\n    {\r\n      id: 'personal_info',\r\n      level: 'A1',\r\n      prompt: \"Parlami di te: come ti chiami, quanti anni hai, da dove vieni e cosa fai nella vita quotidiana.\",\r\n      duration: 60,\r\n      preparationTime: 30\r\n    }\r\n  ]\r\n};\r\n\r\n// Mock AI Services\r\nexport const MockQuestionService = {\r\n  getQuestionsBySection: (section) => {\r\n    return Promise.resolve(mockQuestionBank[section] || []);\r\n  },\r\n\r\n  // SISTEMA IBRIDO INTEGRATO\r\n  evaluateWriting: async (text, level) => {\r\n    return await HybridEvaluator.evaluateWriting(text, level);\r\n  },\r\n\r\n  evaluateSpeaking: async (audioBlob, level) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const duration = 30;\r\n        let score = 40;\r\n        \r\n        if (duration > 20) score += 15;\r\n        if (duration > 40) score += 20;\r\n        \r\n        resolve({\r\n          score: Math.min(score + Math.random() * 20, 95),\r\n          feedback: \"Pronuncia comprensibile, ritmo appropriato per il livello\",\r\n          duration: duration\r\n        });\r\n      }, 1000);\r\n    });\r\n  },\r\n\r\n  submitResults: async (results) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        console.log('📊 Risultati salvati:', results);\r\n        resolve({ success: true, id: Date.now() });\r\n      }, 500);\r\n    });\r\n  }\r\n};\r\n\r\n// Algoritmo di scoring QCER con debug dettagliato\r\nexport const QCERScoring = {\r\n  calculateLevel: (scores) => {\r\n    console.log(`🎯 === RISULTATI DETTAGLIATI TEST QCER ===`);\r\n    console.log(`📖 Lettura/Comprensione: ${scores.reading.toFixed(1)}%`);\r\n    console.log(`📝 Grammatica: ${scores.grammar.toFixed(1)}%`);\r\n    console.log(`✍️ Scrittura: ${scores.writing.toFixed(1)}%`);\r\n    console.log(`🗣️ Parlato: ${scores.speaking.toFixed(1)}%`);\r\n\r\n    const weights = {\r\n      reading: 0.25,\r\n      grammar: 0.25, \r\n      writing: 0.3,\r\n      speaking: 0.2\r\n    };\r\n\r\n    const totalScore = \r\n      scores.reading * weights.reading +\r\n      scores.grammar * weights.grammar +\r\n      scores.writing * weights.writing +\r\n      scores.speaking * weights.speaking;\r\n\r\n    console.log(`🎯 Punteggio Totale: ${totalScore.toFixed(1)}%`);\r\n\r\n    const levels = {\r\n      'A1': { min: 0, max: 32, belt: 'yellow' },\r\n      'A2': { min: 32, max: 52, belt: 'orange' }, \r\n      'B1': { min: 52, max: 68, belt: 'green' },\r\n      'B2': { min: 68, max: 82, belt: 'blue' },\r\n      'C1': { min: 82, max: 92, belt: 'brown' },\r\n      'C2': { min: 92, max: 100, belt: 'black' }\r\n    };\r\n\r\n    let assignedLevel = 'A1';\r\n    for (const [level, range] of Object.entries(levels)) {\r\n      if (totalScore >= range.min && totalScore < range.max) {\r\n        assignedLevel = level;\r\n        break;\r\n      }\r\n    }\r\n\r\n    console.log(`🥋 Livello Assegnato: ${assignedLevel}`);\r\n    console.log(`🔍 Mapping: A1(0-32%), A2(32-52%), B1(52-68%), B2(68-82%), C1(82-92%), C2(92%+)`);\r\n\r\n    return {\r\n      level: assignedLevel,\r\n      score: totalScore,\r\n      belt: levels[assignedLevel].belt,\r\n      breakdown: scores\r\n    };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}