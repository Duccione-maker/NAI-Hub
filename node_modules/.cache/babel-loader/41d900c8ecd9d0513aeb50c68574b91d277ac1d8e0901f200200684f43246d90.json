{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utente\\\\lingua-kai-platform - restructured\\\\src\\\\components\\\\components\\\\TestIngresso\\\\TestIngresso.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './TestIngressoStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestIngresso = () => {\n  _s();\n  const navigate = useNavigate();\n  const [currentSection, setCurrentSection] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [isNAI, setIsNAI] = useState(false);\n  const [motherLanguage, setMotherLanguage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [questionBank, setQuestionBank] = useState({});\n  const [currentQuestions, setCurrentQuestions] = useState([]);\n  const [sectionProgress, setSectionProgress] = useState({\n    demographic: false,\n    reading: false,\n    grammar: false,\n    writing: false,\n    speaking: false\n  });\n\n  // Configurazione sezioni test QCER\n  const testSections = [{\n    id: 'demographic',\n    name: 'Informazioni di Base',\n    questions: 2\n  }, {\n    id: 'reading',\n    name: 'Comprensione Scritta',\n    questions: 8\n  }, {\n    id: 'grammar',\n    name: 'Grammatica e Vocabolario',\n    questions: 8\n  }, {\n    id: 'writing',\n    name: 'Produzione Scritta',\n    questions: 3\n  }, {\n    id: 'speaking',\n    name: 'Produzione Orale',\n    questions: 3\n  }];\n\n  // Mapping QCER → Cinture Karate\n  const qcerToBelt = {\n    'A1': {\n      belt: 'yellow',\n      name: 'Cintura Gialla',\n      color: '#FFD700'\n    },\n    'A2': {\n      belt: 'orange',\n      name: 'Cintura Arancione',\n      color: '#FFA500'\n    },\n    'B1': {\n      belt: 'green',\n      name: 'Cintura Verde',\n      color: '#32CD32'\n    },\n    'B2': {\n      belt: 'blue',\n      name: 'Cintura Blu',\n      color: '#4169E1'\n    },\n    'C1': {\n      belt: 'brown',\n      name: 'Cintura Marrone',\n      color: '#8B4513'\n    },\n    'C2': {\n      belt: 'black',\n      name: 'Cintura Nera',\n      color: '#000000'\n    }\n  };\n\n  // Lingue supportate per studenti NAI\n  const supportedLanguages = [{\n    code: 'al',\n    name: 'Albanese'\n  }, {\n    code: 'ko',\n    name: 'Kosovaro'\n  }, {\n    code: 'hi',\n    name: 'Hindi'\n  }, {\n    code: 'ar',\n    name: 'Arabo'\n  }, {\n    code: 'zh',\n    name: 'Cinese'\n  }, {\n    code: 'ro',\n    name: 'Rumeno'\n  }, {\n    code: 'es',\n    name: 'Spagnolo'\n  }, {\n    code: 'pt',\n    name: 'Portoghese'\n  }, {\n    code: 'uk',\n    name: 'Ucraino'\n  }];\n\n  // Caricamento dinamico domande AI\n  useEffect(() => {\n    loadQuestionBank();\n  }, []);\n  const loadQuestionBank = async () => {\n    setLoading(true);\n    try {\n      // Qui chiameremo l'AI Service per generare domande\n      const response = await fetch('/api/questions/generate-test-bank');\n      const questions = await response.json();\n      setQuestionBank(questions);\n\n      // Carica prime domande demografiche\n      setCurrentQuestions(questions.demographic || []);\n    } catch (error) {\n      console.error('Errore caricamento domande:', error);\n      // Fallback a domande hardcoded per ora\n      loadHardcodedQuestions();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadHardcodedQuestions = () => {\n    // Fallback temporaneo con domande esistenti\n    const hardcodedBank = {\n      demographic: [{\n        id: 'years_italy',\n        type: 'multiple_choice',\n        question: 'Da quanti anni sei in Italia?',\n        options: [{\n          value: 'less1',\n          text: 'Meno di 1 anno'\n        }, {\n          value: '1to2',\n          text: '1-2 anni'\n        }, {\n          value: 'more2',\n          text: 'Più di 2 anni'\n        }, {\n          value: 'born',\n          text: 'Sono nato/a in Italia'\n        }]\n      }],\n      reading: [],\n      // Verranno generate dall'AI\n      grammar: [],\n      // Verranno generate dall'AI\n      writing: [],\n      // Verranno generate dall'AI\n      speaking: [] // Verranno generate dall'AI\n    };\n    setQuestionBank(hardcodedBank);\n    setCurrentQuestions(hardcodedBank.demographic);\n  };\n\n  // Gestione avanzamento sezioni\n  const handleAnswer = (questionId, answer) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: answer\n    }));\n  };\n  const nextSection = async () => {\n    const currentSectionId = testSections[currentSection].id;\n\n    // Determina se è NAI dalla prima sezione\n    if (currentSection === 0) {\n      const yearsInItaly = answers.years_italy;\n      setIsNAI(yearsInItaly === 'less1' || yearsInItaly === '1to2');\n    }\n\n    // Marca sezione completata\n    setSectionProgress(prev => ({\n      ...prev,\n      [currentSectionId]: true\n    }));\n\n    // Avanza alla sezione successiva\n    if (currentSection < testSections.length - 1) {\n      const nextSectionIndex = currentSection + 1;\n      const nextSectionId = testSections[nextSectionIndex].id;\n      setCurrentSection(nextSectionIndex);\n\n      // Carica domande per la prossima sezione\n      await loadSectionQuestions(nextSectionId);\n    } else {\n      // Test completato\n      await submitTest();\n    }\n  };\n  const loadSectionQuestions = async sectionId => {\n    setLoading(true);\n    try {\n      // Genera domande adattive basate su risposte precedenti\n      const response = await fetch('/api/questions/generate-section', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          section: sectionId,\n          isNAI: isNAI,\n          motherLanguage: motherLanguage,\n          previousAnswers: answers\n        })\n      });\n      const sectionQuestions = await response.json();\n      setCurrentQuestions(sectionQuestions);\n    } catch (error) {\n      console.error('Errore generazione domande sezione:', error);\n      // Fallback a domande base\n      setCurrentQuestions(questionBank[sectionId] || []);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Algoritmo di scoring QCER avanzato\n  const calculateQCERLevel = () => {\n    const scores = {\n      reading: 0,\n      grammar: 0,\n      writing: 0,\n      speaking: 0\n    };\n\n    // Calcola punteggi per sezione (0-100)\n    Object.keys(scores).forEach(section => {\n      const sectionAnswers = Object.keys(answers).filter(key => key.startsWith(section)).map(key => answers[key]);\n      if (sectionAnswers.length > 0) {\n        const correctAnswers = sectionAnswers.filter(answer => answer.isCorrect || answer.score > 0.7).length;\n        scores[section] = correctAnswers / sectionAnswers.length * 100;\n      }\n    });\n\n    // Media ponderata (lettura e grammatica più importanti)\n    const totalScore = scores.reading * 0.3 + scores.grammar * 0.3 + scores.writing * 0.2 + scores.speaking * 0.2;\n\n    // Mapping score → livello QCER\n    if (totalScore >= 90) return 'C2';\n    if (totalScore >= 80) return 'C1';\n    if (totalScore >= 65) return 'B2';\n    if (totalScore >= 50) return 'B1';\n    if (totalScore >= 30) return 'A2';\n    return 'A1';\n  };\n\n  // Invio test e assegnazione cintura\n  const submitTest = async () => {\n    setLoading(true);\n    try {\n      const qcerLevel = calculateQCERLevel();\n      const assignedBelt = qcerToBelt[qcerLevel];\n\n      // Salva risultati nel database\n      const response = await fetch('/api/test-results/save', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          answers,\n          qcerLevel,\n          belt: assignedBelt.belt,\n          isNAI,\n          motherLanguage,\n          timestamp: new Date().toISOString()\n        })\n      });\n      if (response.ok) {\n        // Aggiorna profilo utente\n        await updateUserProfile(qcerLevel, assignedBelt);\n\n        // Reindirizza con celebrazione cintura\n        navigate('/dashboard', {\n          state: {\n            newBelt: assignedBelt,\n            qcerLevel,\n            isFirstTest: true\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Errore salvataggio test:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateUserProfile = async (qcerLevel, belt) => {\n    try {\n      await fetch('/api/user/update-level', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          qcerLevel,\n          currentBelt: belt.belt,\n          testCompletedAt: new Date().toISOString()\n        })\n      });\n    } catch (error) {\n      console.error('Errore aggiornamento profilo:', error);\n    }\n  };\n\n  // Funzione per verificare se si può procedere\n  const canProceed = () => {\n    var _testSections$current;\n    const currentSectionId = (_testSections$current = testSections[currentSection]) === null || _testSections$current === void 0 ? void 0 : _testSections$current.id;\n    if (currentSection === 0) {\n      // Sezione demografica\n      const hasYearsAnswer = answers.years_italy;\n      const hasLanguageIfNAI = !isNAI || motherLanguage;\n      return hasYearsAnswer && hasLanguageIfNAI;\n    }\n\n    // Per altre sezioni, verifica che ci siano risposte\n    const sectionAnswers = Object.keys(answers).filter(key => key.includes(currentSectionId) || key.startsWith(currentSectionId));\n    const requiredAnswers = currentQuestions.length;\n    return sectionAnswers.length >= Math.max(1, requiredAnswers * 0.5); // Almeno 50% delle domande\n  };\n\n  // Rendering sezione demografica\n  const renderDemographicSection = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Informazioni di Base\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demographic-questions\",\n      children: [currentQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"question-text\",\n          children: question.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-grid\",\n          children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: answers[question.id] === option.value ? 'selected' : '',\n            onClick: () => handleAnswer(question.id, option.value),\n            children: option.text\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this)]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this)), isNAI && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"language-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Qual \\xE8 la tua lingua madre?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"language-grid\",\n          children: supportedLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: motherLanguage === lang.code ? 'selected' : '',\n            onClick: () => setMotherLanguage(lang.code),\n            children: lang.name\n          }, lang.code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n\n  // Rendering sezioni competenze QCER\n  const renderSkillSection = () => {\n    const section = testSections[currentSection];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: section.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-progress\",\n        children: [\"Sezione \", currentSection + 1, \" di \", testSections.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-container\",\n        children: currentQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-block\",\n          children: [question.type === 'reading_comprehension' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reading-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"reading-text\",\n              children: question.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comprehension-questions\",\n              children: question.subQuestions.map(subQ => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sub-question\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: subQ.question\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"options-grid\",\n                  children: subQ.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: answers[subQ.id] === option.value ? 'selected' : '',\n                    onClick: () => handleAnswer(subQ.id, option.value),\n                    children: option.text\n                  }, option.value, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 353,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 25\n                }, this)]\n              }, subQ.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this), question.type === 'grammar' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grammar-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"options-grid\",\n              children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: answers[question.id] === option.value ? 'selected' : '',\n                onClick: () => handleAnswer(question.id, option.value),\n                children: option.text\n              }, option.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 17\n          }, this), question.type === 'writing' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"writing-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.prompt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              placeholder: question.placeholder,\n              value: answers[question.id] || '',\n              onChange: e => handleAnswer(question.id, e.target.value),\n              rows: question.minRows || 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-count\",\n              children: [\"Parole: \", (answers[question.id] || '').split(' ').filter(w => w).length, question.minWords && ` (minimo: ${question.minWords})`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 17\n          }, this), question.type === 'speaking' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speaking-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.prompt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(SpeakingRecorder, {\n              questionId: question.id,\n              onRecordingComplete: audioData => handleAnswer(question.id, audioData),\n              maxDuration: question.maxDuration || 60\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 17\n          }, this)]\n        }, question.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Progress tracker migliorato\n  const renderProgressTracker = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-tracker-qcer\",\n    children: testSections.map((section, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `progress-step ${index < currentSection ? 'completed' : index === currentSection ? 'active' : 'pending'}`,\n        children: index < currentSection ? '✓' : index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"section-name\",\n        children: section.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 11\n      }, this), index < testSections.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 47\n      }, this)]\n    }, section.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 5\n  }, this);\n\n  // Loading con messaggi dinamici\n  const renderLoading = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: currentSection === 0 ? 'Caricamento test...' : currentSection < testSections.length ? 'Generazione domande adattive...' : 'Analisi risultati e assegnazione cintura...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this), currentSection === testSections.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"belt-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Preparazione della tua cintura karate...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"belt-animation\",\n        children: \"\\uD83E\\uDD4B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-ingresso-container qcer-enhanced\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"test-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test di Livello QCER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"test-description\",\n        children: \"Questo test determiner\\xE0 il tuo livello secondo il Quadro Comune Europeo e ti assegner\\xE0 la cintura karate corrispondente per iniziare il tuo percorso.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }, this), renderProgressTracker(), loading ? renderLoading() : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-content\",\n      children: [currentSection === 0 ? renderDemographicSection() : renderSkillSection(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-navigation\",\n        children: [currentSection > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-button\",\n          onClick: () => setCurrentSection(currentSection - 1),\n          children: \"Indietro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-button\",\n          onClick: nextSection,\n          disabled: !canProceed(),\n          children: currentSection === testSections.length - 1 ? 'Completa Test' : 'Continua'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 455,\n    columnNumber: 5\n  }, this);\n};\n\n// Componente per registrazione vocale\n_s(TestIngresso, \"gSytEff1wqH/WBg+kxPn5lMp2XM=\", false, function () {\n  return [useNavigate];\n});\n_c = TestIngresso;\nconst SpeakingRecorder = ({\n  questionId,\n  onRecordingComplete,\n  maxDuration\n}) => {\n  _s2();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioURL, setAudioURL] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const recorder = new MediaRecorder(stream);\n      const chunks = [];\n      recorder.ondataavailable = event => chunks.push(event.data);\n      recorder.onstop = () => {\n        const audioBlob = new Blob(chunks, {\n          type: 'audio/wav'\n        });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        setAudioURL(audioUrl);\n        onRecordingComplete({\n          audioBlob,\n          audioUrl,\n          duration: Date.now() - startTime\n        });\n      };\n      const startTime = Date.now();\n      recorder.start();\n      setMediaRecorder(recorder);\n      setIsRecording(true);\n\n      // Auto-stop dopo maxDuration\n      setTimeout(() => {\n        if (recorder.state === 'recording') {\n          stopRecording();\n        }\n      }, maxDuration * 1000);\n    } catch (error) {\n      console.error('Errore accesso microfono:', error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speaking-recorder\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recording-controls\",\n      children: !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"record-button\",\n        onClick: startRecording,\n        disabled: !!audioURL,\n        children: \"\\uD83C\\uDFA4 Inizia Registrazione\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stop-button recording\",\n        onClick: stopRecording,\n        children: \"\\u23F9\\uFE0F Stop Registrazione\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 7\n    }, this), audioURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-playback\",\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: audioURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"re-record-button\",\n        onClick: () => {\n          setAudioURL(null);\n          setIsRecording(false);\n        },\n        children: \"\\uD83D\\uDD04 Registra di Nuovo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 543,\n    columnNumber: 5\n  }, this);\n};\n_s2(SpeakingRecorder, \"D8J2+Pjuvx618Za8XboP0kgVIsQ=\");\n_c2 = SpeakingRecorder;\nexport default TestIngresso;\nvar _c, _c2;\n$RefreshReg$(_c, \"TestIngresso\");\n$RefreshReg$(_c2, \"SpeakingRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","TestIngresso","_s","navigate","currentSection","setCurrentSection","answers","setAnswers","isNAI","setIsNAI","motherLanguage","setMotherLanguage","loading","setLoading","questionBank","setQuestionBank","currentQuestions","setCurrentQuestions","sectionProgress","setSectionProgress","demographic","reading","grammar","writing","speaking","testSections","id","name","questions","qcerToBelt","belt","color","supportedLanguages","code","loadQuestionBank","response","fetch","json","error","console","loadHardcodedQuestions","hardcodedBank","type","question","options","value","text","handleAnswer","questionId","answer","prev","nextSection","currentSectionId","yearsInItaly","years_italy","length","nextSectionIndex","nextSectionId","loadSectionQuestions","submitTest","sectionId","method","headers","body","JSON","stringify","section","previousAnswers","sectionQuestions","calculateQCERLevel","scores","Object","keys","forEach","sectionAnswers","filter","key","startsWith","map","correctAnswers","isCorrect","score","totalScore","qcerLevel","assignedBelt","timestamp","Date","toISOString","ok","updateUserProfile","state","newBelt","isFirstTest","currentBelt","testCompletedAt","canProceed","_testSections$current","hasYearsAnswer","hasLanguageIfNAI","includes","requiredAnswers","Math","max","renderDemographicSection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","option","onClick","lang","renderSkillSection","subQuestions","subQ","prompt","placeholder","onChange","e","target","rows","minRows","split","w","minWords","SpeakingRecorder","onRecordingComplete","audioData","maxDuration","renderProgressTracker","renderLoading","disabled","_c","_s2","isRecording","setIsRecording","audioURL","setAudioURL","mediaRecorder","setMediaRecorder","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","chunks","ondataavailable","event","push","data","onstop","audioBlob","Blob","audioUrl","URL","createObjectURL","duration","now","startTime","start","setTimeout","stopRecording","stop","controls","src","_c2","$RefreshReg$"],"sources":["C:/Users/Utente/lingua-kai-platform - restructured/src/components/components/TestIngresso/TestIngresso.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './TestIngressoStyles.css';\r\n\r\nconst TestIngresso = () => {\r\n  const navigate = useNavigate();\r\n  const [currentSection, setCurrentSection] = useState(0);\r\n  const [answers, setAnswers] = useState({});\r\n  const [isNAI, setIsNAI] = useState(false);\r\n  const [motherLanguage, setMotherLanguage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [questionBank, setQuestionBank] = useState({});\r\n  const [currentQuestions, setCurrentQuestions] = useState([]);\r\n  const [sectionProgress, setSectionProgress] = useState({\r\n    demographic: false,\r\n    reading: false,\r\n    grammar: false,\r\n    writing: false,\r\n    speaking: false\r\n  });\r\n\r\n  // Configurazione sezioni test QCER\r\n  const testSections = [\r\n    { id: 'demographic', name: 'Informazioni di Base', questions: 2 },\r\n    { id: 'reading', name: 'Comprensione Scritta', questions: 8 },\r\n    { id: 'grammar', name: 'Grammatica e Vocabolario', questions: 8 },\r\n    { id: 'writing', name: 'Produzione Scritta', questions: 3 },\r\n    { id: 'speaking', name: 'Produzione Orale', questions: 3 }\r\n  ];\r\n\r\n  // Mapping QCER → Cinture Karate\r\n  const qcerToBelt = {\r\n    'A1': { belt: 'yellow', name: 'Cintura Gialla', color: '#FFD700' },\r\n    'A2': { belt: 'orange', name: 'Cintura Arancione', color: '#FFA500' },\r\n    'B1': { belt: 'green', name: 'Cintura Verde', color: '#32CD32' },\r\n    'B2': { belt: 'blue', name: 'Cintura Blu', color: '#4169E1' },\r\n    'C1': { belt: 'brown', name: 'Cintura Marrone', color: '#8B4513' },\r\n    'C2': { belt: 'black', name: 'Cintura Nera', color: '#000000' }\r\n  };\r\n\r\n  // Lingue supportate per studenti NAI\r\n  const supportedLanguages = [\r\n    { code: 'al', name: 'Albanese' },\r\n    { code: 'ko', name: 'Kosovaro' },\r\n    { code: 'hi', name: 'Hindi' },\r\n    { code: 'ar', name: 'Arabo' },\r\n    { code: 'zh', name: 'Cinese' },\r\n    { code: 'ro', name: 'Rumeno' },\r\n    { code: 'es', name: 'Spagnolo' },\r\n    { code: 'pt', name: 'Portoghese' },\r\n    { code: 'uk', name: 'Ucraino' }\r\n  ];\r\n\r\n  // Caricamento dinamico domande AI\r\n  useEffect(() => {\r\n    loadQuestionBank();\r\n  }, []);\r\n\r\n  const loadQuestionBank = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Qui chiameremo l'AI Service per generare domande\r\n      const response = await fetch('/api/questions/generate-test-bank');\r\n      const questions = await response.json();\r\n      setQuestionBank(questions);\r\n      \r\n      // Carica prime domande demografiche\r\n      setCurrentQuestions(questions.demographic || []);\r\n    } catch (error) {\r\n      console.error('Errore caricamento domande:', error);\r\n      // Fallback a domande hardcoded per ora\r\n      loadHardcodedQuestions();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadHardcodedQuestions = () => {\r\n    // Fallback temporaneo con domande esistenti\r\n    const hardcodedBank = {\r\n      demographic: [\r\n        {\r\n          id: 'years_italy',\r\n          type: 'multiple_choice',\r\n          question: 'Da quanti anni sei in Italia?',\r\n          options: [\r\n            { value: 'less1', text: 'Meno di 1 anno' },\r\n            { value: '1to2', text: '1-2 anni' },\r\n            { value: 'more2', text: 'Più di 2 anni' },\r\n            { value: 'born', text: 'Sono nato/a in Italia' }\r\n          ]\r\n        }\r\n      ],\r\n      reading: [], // Verranno generate dall'AI\r\n      grammar: [], // Verranno generate dall'AI\r\n      writing: [], // Verranno generate dall'AI\r\n      speaking: [] // Verranno generate dall'AI\r\n    };\r\n    setQuestionBank(hardcodedBank);\r\n    setCurrentQuestions(hardcodedBank.demographic);\r\n  };\r\n\r\n  // Gestione avanzamento sezioni\r\n  const handleAnswer = (questionId, answer) => {\r\n    setAnswers(prev => ({\r\n      ...prev,\r\n      [questionId]: answer\r\n    }));\r\n  };\r\n\r\n  const nextSection = async () => {\r\n    const currentSectionId = testSections[currentSection].id;\r\n    \r\n    // Determina se è NAI dalla prima sezione\r\n    if (currentSection === 0) {\r\n      const yearsInItaly = answers.years_italy;\r\n      setIsNAI(yearsInItaly === 'less1' || yearsInItaly === '1to2');\r\n    }\r\n\r\n    // Marca sezione completata\r\n    setSectionProgress(prev => ({\r\n      ...prev,\r\n      [currentSectionId]: true\r\n    }));\r\n\r\n    // Avanza alla sezione successiva\r\n    if (currentSection < testSections.length - 1) {\r\n      const nextSectionIndex = currentSection + 1;\r\n      const nextSectionId = testSections[nextSectionIndex].id;\r\n      \r\n      setCurrentSection(nextSectionIndex);\r\n      \r\n      // Carica domande per la prossima sezione\r\n      await loadSectionQuestions(nextSectionId);\r\n    } else {\r\n      // Test completato\r\n      await submitTest();\r\n    }\r\n  };\r\n\r\n  const loadSectionQuestions = async (sectionId) => {\r\n    setLoading(true);\r\n    try {\r\n      // Genera domande adattive basate su risposte precedenti\r\n      const response = await fetch('/api/questions/generate-section', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          section: sectionId,\r\n          isNAI: isNAI,\r\n          motherLanguage: motherLanguage,\r\n          previousAnswers: answers\r\n        })\r\n      });\r\n      \r\n      const sectionQuestions = await response.json();\r\n      setCurrentQuestions(sectionQuestions);\r\n    } catch (error) {\r\n      console.error('Errore generazione domande sezione:', error);\r\n      // Fallback a domande base\r\n      setCurrentQuestions(questionBank[sectionId] || []);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Algoritmo di scoring QCER avanzato\r\n  const calculateQCERLevel = () => {\r\n    const scores = {\r\n      reading: 0,\r\n      grammar: 0,\r\n      writing: 0,\r\n      speaking: 0\r\n    };\r\n\r\n    // Calcola punteggi per sezione (0-100)\r\n    Object.keys(scores).forEach(section => {\r\n      const sectionAnswers = Object.keys(answers)\r\n        .filter(key => key.startsWith(section))\r\n        .map(key => answers[key]);\r\n      \r\n      if (sectionAnswers.length > 0) {\r\n        const correctAnswers = sectionAnswers.filter(answer => \r\n          answer.isCorrect || answer.score > 0.7\r\n        ).length;\r\n        scores[section] = (correctAnswers / sectionAnswers.length) * 100;\r\n      }\r\n    });\r\n\r\n    // Media ponderata (lettura e grammatica più importanti)\r\n    const totalScore = (\r\n      scores.reading * 0.3 +\r\n      scores.grammar * 0.3 +\r\n      scores.writing * 0.2 +\r\n      scores.speaking * 0.2\r\n    );\r\n\r\n    // Mapping score → livello QCER\r\n    if (totalScore >= 90) return 'C2';\r\n    if (totalScore >= 80) return 'C1';\r\n    if (totalScore >= 65) return 'B2';\r\n    if (totalScore >= 50) return 'B1';\r\n    if (totalScore >= 30) return 'A2';\r\n    return 'A1';\r\n  };\r\n\r\n  // Invio test e assegnazione cintura\r\n  const submitTest = async () => {\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const qcerLevel = calculateQCERLevel();\r\n      const assignedBelt = qcerToBelt[qcerLevel];\r\n      \r\n      // Salva risultati nel database\r\n      const response = await fetch('/api/test-results/save', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          answers,\r\n          qcerLevel,\r\n          belt: assignedBelt.belt,\r\n          isNAI,\r\n          motherLanguage,\r\n          timestamp: new Date().toISOString()\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Aggiorna profilo utente\r\n        await updateUserProfile(qcerLevel, assignedBelt);\r\n        \r\n        // Reindirizza con celebrazione cintura\r\n        navigate('/dashboard', { \r\n          state: { \r\n            newBelt: assignedBelt,\r\n            qcerLevel,\r\n            isFirstTest: true \r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Errore salvataggio test:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateUserProfile = async (qcerLevel, belt) => {\r\n    try {\r\n      await fetch('/api/user/update-level', {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          qcerLevel,\r\n          currentBelt: belt.belt,\r\n          testCompletedAt: new Date().toISOString()\r\n        })\r\n      });\r\n    } catch (error) {\r\n      console.error('Errore aggiornamento profilo:', error);\r\n    }\r\n  };\r\n\r\n  // Funzione per verificare se si può procedere\r\n  const canProceed = () => {\r\n    const currentSectionId = testSections[currentSection]?.id;\r\n    \r\n    if (currentSection === 0) {\r\n      // Sezione demografica\r\n      const hasYearsAnswer = answers.years_italy;\r\n      const hasLanguageIfNAI = !isNAI || motherLanguage;\r\n      return hasYearsAnswer && hasLanguageIfNAI;\r\n    }\r\n    \r\n    // Per altre sezioni, verifica che ci siano risposte\r\n    const sectionAnswers = Object.keys(answers).filter(key => \r\n      key.includes(currentSectionId) || \r\n      key.startsWith(currentSectionId)\r\n    );\r\n    \r\n    const requiredAnswers = currentQuestions.length;\r\n    return sectionAnswers.length >= Math.max(1, requiredAnswers * 0.5); // Almeno 50% delle domande\r\n  };\r\n\r\n  // Rendering sezione demografica\r\n  const renderDemographicSection = () => (\r\n    <div className=\"test-section\">\r\n      <h3>Informazioni di Base</h3>\r\n      <div className=\"demographic-questions\">\r\n        {currentQuestions.map((question, index) => (\r\n          <div key={question.id} className=\"question-container\">\r\n            <p className=\"question-text\">{question.question}</p>\r\n            <div className=\"options-grid\">\r\n              {question.options.map(option => (\r\n                <button\r\n                  key={option.value}\r\n                  className={answers[question.id] === option.value ? 'selected' : ''}\r\n                  onClick={() => handleAnswer(question.id, option.value)}\r\n                >\r\n                  {option.text}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        \r\n        {/* Selezione lingua madre per NAI */}\r\n        {isNAI && (\r\n          <div className=\"language-selection\">\r\n            <h4>Qual è la tua lingua madre?</h4>\r\n            <div className=\"language-grid\">\r\n              {supportedLanguages.map(lang => (\r\n                <button\r\n                  key={lang.code}\r\n                  className={motherLanguage === lang.code ? 'selected' : ''}\r\n                  onClick={() => setMotherLanguage(lang.code)}\r\n                >\r\n                  {lang.name}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Rendering sezioni competenze QCER\r\n  const renderSkillSection = () => {\r\n    const section = testSections[currentSection];\r\n    \r\n    return (\r\n      <div className=\"test-section\">\r\n        <h3>{section.name}</h3>\r\n        <div className=\"section-progress\">\r\n          Sezione {currentSection + 1} di {testSections.length}\r\n        </div>\r\n        \r\n        <div className=\"questions-container\">\r\n          {currentQuestions.map((question, index) => (\r\n            <div key={question.id} className=\"question-block\">\r\n              {/* Rendering basato sul tipo di domanda */}\r\n              {question.type === 'reading_comprehension' && (\r\n                <div className=\"reading-question\">\r\n                  <div className=\"reading-text\">{question.text}</div>\r\n                  <div className=\"comprehension-questions\">\r\n                    {question.subQuestions.map(subQ => (\r\n                      <div key={subQ.id} className=\"sub-question\">\r\n                        <p>{subQ.question}</p>\r\n                        <div className=\"options-grid\">\r\n                          {subQ.options.map(option => (\r\n                            <button\r\n                              key={option.value}\r\n                              className={answers[subQ.id] === option.value ? 'selected' : ''}\r\n                              onClick={() => handleAnswer(subQ.id, option.value)}\r\n                            >\r\n                              {option.text}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {question.type === 'grammar' && (\r\n                <div className=\"grammar-question\">\r\n                  <p>{question.question}</p>\r\n                  <div className=\"options-grid\">\r\n                    {question.options.map(option => (\r\n                      <button\r\n                        key={option.value}\r\n                        className={answers[question.id] === option.value ? 'selected' : ''}\r\n                        onClick={() => handleAnswer(question.id, option.value)}\r\n                      >\r\n                        {option.text}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {question.type === 'writing' && (\r\n                <div className=\"writing-question\">\r\n                  <p>{question.prompt}</p>\r\n                  <textarea\r\n                    placeholder={question.placeholder}\r\n                    value={answers[question.id] || ''}\r\n                    onChange={(e) => handleAnswer(question.id, e.target.value)}\r\n                    rows={question.minRows || 4}\r\n                  />\r\n                  <div className=\"word-count\">\r\n                    Parole: {(answers[question.id] || '').split(' ').filter(w => w).length}\r\n                    {question.minWords && ` (minimo: ${question.minWords})`}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {question.type === 'speaking' && (\r\n                <div className=\"speaking-question\">\r\n                  <p>{question.prompt}</p>\r\n                  <SpeakingRecorder \r\n                    questionId={question.id}\r\n                    onRecordingComplete={(audioData) => handleAnswer(question.id, audioData)}\r\n                    maxDuration={question.maxDuration || 60}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Progress tracker migliorato\r\n  const renderProgressTracker = () => (\r\n    <div className=\"progress-tracker-qcer\">\r\n      {testSections.map((section, index) => (\r\n        <div key={section.id} className=\"progress-section\">\r\n          <div className={`progress-step ${\r\n            index < currentSection ? 'completed' : \r\n            index === currentSection ? 'active' : 'pending'\r\n          }`}>\r\n            {index < currentSection ? '✓' : index + 1}\r\n          </div>\r\n          <span className=\"section-name\">{section.name}</span>\r\n          {index < testSections.length - 1 && <div className=\"progress-line\" />}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  // Loading con messaggi dinamici\r\n  const renderLoading = () => (\r\n    <div className=\"loading-container\">\r\n      <div className=\"loading-spinner\" />\r\n      <p>\r\n        {currentSection === 0 ? 'Caricamento test...' :\r\n         currentSection < testSections.length ? 'Generazione domande adattive...' :\r\n         'Analisi risultati e assegnazione cintura...'}\r\n      </p>\r\n      {currentSection === testSections.length && (\r\n        <div className=\"belt-preview\">\r\n          <p>Preparazione della tua cintura karate...</p>\r\n          <div className=\"belt-animation\">🥋</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"test-ingresso-container qcer-enhanced\">\r\n      <header className=\"test-header\">\r\n        <h2>Test di Livello QCER</h2>\r\n        <p className=\"test-description\">\r\n          Questo test determinerà il tuo livello secondo il Quadro Comune Europeo \r\n          e ti assegnerà la cintura karate corrispondente per iniziare il tuo percorso.\r\n        </p>\r\n      </header>\r\n      \r\n      {renderProgressTracker()}\r\n      \r\n      {loading ? renderLoading() : (\r\n        <div className=\"test-content\">\r\n          {currentSection === 0 ? renderDemographicSection() : renderSkillSection()}\r\n          \r\n          <div className=\"section-navigation\">\r\n            {currentSection > 0 && (\r\n              <button \r\n                className=\"back-button\"\r\n                onClick={() => setCurrentSection(currentSection - 1)}\r\n              >\r\n                Indietro\r\n              </button>\r\n            )}\r\n            \r\n            <button\r\n              className=\"next-button\"\r\n              onClick={nextSection}\r\n              disabled={!canProceed()}\r\n            >\r\n              {currentSection === testSections.length - 1 ? 'Completa Test' : 'Continua'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Componente per registrazione vocale\r\nconst SpeakingRecorder = ({ questionId, onRecordingComplete, maxDuration }) => {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [audioURL, setAudioURL] = useState(null);\r\n  const [mediaRecorder, setMediaRecorder] = useState(null);\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      const recorder = new MediaRecorder(stream);\r\n      const chunks = [];\r\n\r\n      recorder.ondataavailable = (event) => chunks.push(event.data);\r\n      recorder.onstop = () => {\r\n        const audioBlob = new Blob(chunks, { type: 'audio/wav' });\r\n        const audioUrl = URL.createObjectURL(audioBlob);\r\n        setAudioURL(audioUrl);\r\n        onRecordingComplete({\r\n          audioBlob,\r\n          audioUrl,\r\n          duration: Date.now() - startTime\r\n        });\r\n      };\r\n\r\n      const startTime = Date.now();\r\n      recorder.start();\r\n      setMediaRecorder(recorder);\r\n      setIsRecording(true);\r\n\r\n      // Auto-stop dopo maxDuration\r\n      setTimeout(() => {\r\n        if (recorder.state === 'recording') {\r\n          stopRecording();\r\n        }\r\n      }, maxDuration * 1000);\r\n\r\n    } catch (error) {\r\n      console.error('Errore accesso microfono:', error);\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\r\n      mediaRecorder.stop();\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"speaking-recorder\">\r\n      <div className=\"recording-controls\">\r\n        {!isRecording ? (\r\n          <button \r\n            className=\"record-button\"\r\n            onClick={startRecording}\r\n            disabled={!!audioURL}\r\n          >\r\n            🎤 Inizia Registrazione\r\n          </button>\r\n        ) : (\r\n          <button \r\n            className=\"stop-button recording\"\r\n            onClick={stopRecording}\r\n          >\r\n            ⏹️ Stop Registrazione\r\n          </button>\r\n        )}\r\n      </div>\r\n      \r\n      {audioURL && (\r\n        <div className=\"audio-playback\">\r\n          <audio controls src={audioURL} />\r\n          <button \r\n            className=\"re-record-button\"\r\n            onClick={() => {\r\n              setAudioURL(null);\r\n              setIsRecording(false);\r\n            }}\r\n          >\r\n            🔄 Registra di Nuovo\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestIngresso;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}