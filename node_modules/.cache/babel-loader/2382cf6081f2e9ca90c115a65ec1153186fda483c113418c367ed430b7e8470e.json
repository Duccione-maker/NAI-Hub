{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utente\\\\lingua-kai-platform - restructured\\\\src\\\\components\\\\components\\\\SezioneScrittura\\\\SezioneScrittura.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './SezioneScrittura.css';\n\n// Database di prompt/stimoli per i diversi tipi di esercizi\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst promptsDatabase = {\n  // Prompt per la scrittura libera\n  scritturaLibera: [\"Racconta una giornata indimenticabile della tua vita.\", \"Descrivi il tuo luogo preferito e spiega perché è speciale per te.\", \"Se potessi viaggiare in qualsiasi periodo storico, quale sceglieresti e perché?\", \"Scrivi una lettera al tuo futuro io tra 10 anni.\", \"Immagina di essere invisibile per un giorno. Come lo trascorreresti?\"],\n  // Prompt per descrizione di immagini\n  descrizioneImmagine: [{\n    id: \"img1\",\n    descrizione: \"Un tramonto sul mare con una barca in lontananza.\",\n    richiesta: \"Descrivi questa scena e le emozioni che potrebbe suscitare.\"\n  }, {\n    id: \"img2\",\n    descrizione: \"Una piazza affollata di una città europea.\",\n    richiesta: \"Descrivi l'atmosfera di questa piazza e le persone che la popolano.\"\n  }, {\n    id: \"img3\",\n    descrizione: \"Un bosco autunnale con foglie colorate.\",\n    richiesta: \"Descrivi i colori e le sensazioni di questo paesaggio autunnale.\"\n  }, {\n    id: \"img4\",\n    descrizione: \"Un mercato tradizionale con bancarelle colorate.\",\n    richiesta: \"Descrivi i profumi, i colori e i suoni di questo mercato.\"\n  }],\n  // Testi da riscrivere con modifiche\n  riscritturaTesti: [{\n    originale: \"Ciao Marco! Come stai? Io sto bene. Ti scrivo per invitarti alla mia festa di compleanno sabato. Ci saranno tanti amici e faremo una grigliata. Spero proprio che tu possa venire! A presto!\",\n    richiesta: \"Riscrivi questo messaggio in un registro formale, come se fosse una comunicazione ufficiale.\"\n  }, {\n    originale: \"Il sottoscritto, Dott. Rossi, in qualità di dirigente dell'ufficio amministrativo, con la presente comunica che in data 15/05 si terrà una riunione straordinaria atta a discutere le nuove direttive aziendali. Si richiede gentilmente la presenza di tutto il personale.\",\n    richiesta: \"Riscrivi questa comunicazione formale in un tono più informale e amichevole.\"\n  }, {\n    originale: \"La manifestazione avrà luogo il giorno 10 aprile p.v. alle ore 18.00 presso l'Auditorium comunale. È richiesto un abbigliamento consono all'evento.\",\n    richiesta: \"Riscrivi questo annuncio in uno stile più giovanile e accattivante.\"\n  }, {\n    originale: \"L'azienda informa che, a seguito di interventi di manutenzione straordinaria, gli uffici rimarranno chiusi dal 10 al 15 agosto.\",\n    richiesta: \"Riscrivi questo avviso in modo più dettagliato ed empatico verso i destinatari.\"\n  }]\n};\n\n// Regole grammaticali comuni per i suggerimenti\nconst regoleGrammaticali = {\n  punteggiatura: [{\n    errore: \"mancanza di punto\",\n    regola: \"Ricorda di terminare le frasi con un punto.\"\n  }, {\n    errore: \"mancanza di virgola\",\n    regola: \"Usa la virgola per separare gli elementi di un elenco o le proposizioni.\"\n  }],\n  ortografia: [{\n    errore: \"apostrofo\",\n    regola: \"Ricorda che l'apostrofo si usa per indicare l'elisione di una vocale.\"\n  }, {\n    errore: \"doppie\",\n    regola: \"Le consonanti doppie modificano la pronuncia e il significato delle parole.\"\n  }],\n  sintassi: [{\n    errore: \"concordanza soggetto-verbo\",\n    regola: \"Il verbo deve concordare con il soggetto in numero e persona.\"\n  }, {\n    errore: \"uso del congiuntivo\",\n    regola: \"Il congiuntivo si usa nelle frasi che esprimono dubbio, possibilità o desiderio.\"\n  }]\n};\n\n// Livelli di badge ispirati alle cinture del karate\nconst badgeLevels = [{\n  nome: \"Cintura Bianca\",\n  descrizione: \"Primi passi nella scrittura\",\n  puntiRichiesti: 0,\n  color: \"white\"\n}, {\n  nome: \"Cintura Gialla\",\n  descrizione: \"Conoscenze di base\",\n  puntiRichiesti: 100,\n  color: \"yellow\"\n}, {\n  nome: \"Cintura Arancione\",\n  descrizione: \"Competenze in crescita\",\n  puntiRichiesti: 250,\n  color: \"orange\"\n}, {\n  nome: \"Cintura Verde\",\n  descrizione: \"Buona padronanza linguistica\",\n  puntiRichiesti: 500,\n  color: \"green\"\n}, {\n  nome: \"Cintura Blu\",\n  descrizione: \"Capacità avanzate\",\n  puntiRichiesti: 800,\n  color: \"blue\"\n}, {\n  nome: \"Cintura Marrone\",\n  descrizione: \"Scrittore esperto\",\n  puntiRichiesti: 1200,\n  color: \"brown\"\n}, {\n  nome: \"Cintura Nera\",\n  descrizione: \"Maestria linguistica\",\n  puntiRichiesti: 2000,\n  color: \"black\"\n}];\n\n// Citazioni sulla disciplina e l'apprendimento dai maestri di karate\nconst karateQuotes = [\"\\\"Il karate è come l'acqua bollente; senza calore costante, torna ad essere tiepido.\\\" - Gichin Funakoshi\", \"\\\"Il miglioramento è sempre possibile, non importa da quanto tempo pratichi.\\\" - Shoshin Nagamine\", \"\\\"La perfezione del carattere è la meta ultima.\\\" - Gichin Funakoshi\", \"\\\"Prima di vincere gli altri, devi vincere te stesso.\\\" - Proverbio del karate\", \"\\\"Non temere di camminare lentamente, temi solo di fermarti.\\\" - Antico detto del karate\", \"\\\"La pratica costante è il segreto dell'apprendimento.\\\" - Masatoshi Nakayama\"];\nconst SezioneScrittura = () => {\n  _s();\n  // Stati per il componente\n  const [tipoEsercizio, setTipoEsercizio] = useState('scritturaLibera');\n  const [prompt, setPrompt] = useState({});\n  const [testo, setTesto] = useState('');\n  const [modalitaCorrezione, setModalitaCorrezione] = useState('finale');\n  const [erroriEvidenziati, setErroriEvidenziati] = useState([]);\n  const [suggerimenti, setSuggerimenti] = useState([]);\n  const [stato, setStato] = useState('inizio'); // 'inizio', 'scrittura', 'feedback'\n  const [puntiUtente, setPuntiUtente] = useState(320); // Simuliamo un utente con alcuni punti\n  const [badgeAttuale, setBadgeAttuale] = useState({});\n  const [randomQuote, setRandomQuote] = useState('');\n\n  // Refs\n  const textareaRef = useRef(null);\n  const lastAnalysisTimeRef = useRef(0);\n\n  // Effetto per generare un prompt iniziale e calcolare il badge attuale\n  useEffect(() => {\n    generaNuovoPrompt();\n    calcolaBadgeAttuale();\n    // Seleziona una citazione casuale\n    const quoteIndex = Math.floor(Math.random() * karateQuotes.length);\n    setRandomQuote(karateQuotes[quoteIndex]);\n  }, []);\n\n  // Effetto per analizzare il testo durante la scrittura (solo in modalità in itinere)\n  useEffect(() => {\n    if (modalitaCorrezione === 'itinere' && testo && stato === 'scrittura') {\n      const now = Date.now();\n      // Analizziamo solo ogni 1.5 secondi per non sovraccaricare l'interfaccia\n      if (now - lastAnalysisTimeRef.current > 1500) {\n        analizzaTesto(testo);\n        lastAnalysisTimeRef.current = now;\n      }\n    }\n  }, [testo, modalitaCorrezione, stato]);\n\n  /**\r\n   * Genera un nuovo prompt in base al tipo di esercizio selezionato\r\n   */\n  const generaNuovoPrompt = () => {\n    let nuovoPrompt;\n    switch (tipoEsercizio) {\n      case 'scritturaLibera':\n        const randomIndex = Math.floor(Math.random() * promptsDatabase.scritturaLibera.length);\n        nuovoPrompt = {\n          testo: promptsDatabase.scritturaLibera[randomIndex],\n          tipo: 'scritturaLibera'\n        };\n        break;\n      case 'descrizioneImmagine':\n        const randomImg = Math.floor(Math.random() * promptsDatabase.descrizioneImmagine.length);\n        nuovoPrompt = promptsDatabase.descrizioneImmagine[randomImg];\n        nuovoPrompt.tipo = 'descrizioneImmagine';\n        break;\n      case 'riscritturaTesti':\n        const randomText = Math.floor(Math.random() * promptsDatabase.riscritturaTesti.length);\n        nuovoPrompt = promptsDatabase.riscritturaTesti[randomText];\n        nuovoPrompt.tipo = 'riscritturaTesti';\n        break;\n      default:\n        nuovoPrompt = {\n          testo: \"Scrivi un breve testo su un argomento a tua scelta.\",\n          tipo: 'scritturaLibera'\n        };\n    }\n    setPrompt(nuovoPrompt);\n    setTesto('');\n    setErroriEvidenziati([]);\n    setSuggerimenti([]);\n    setStato('inizio');\n\n    // Seleziona una nuova citazione casuale\n    const quoteIndex = Math.floor(Math.random() * karateQuotes.length);\n    setRandomQuote(karateQuotes[quoteIndex]);\n  };\n\n  /**\r\n   * Calcola il badge attuale dell'utente in base ai punti\r\n   */\n  const calcolaBadgeAttuale = () => {\n    let badgeCorrente = badgeLevels[0]; // Iniziamo dalla cintura bianca\n\n    for (let i = 1; i < badgeLevels.length; i++) {\n      if (puntiUtente >= badgeLevels[i].puntiRichiesti) {\n        badgeCorrente = badgeLevels[i];\n      } else {\n        break;\n      }\n    }\n    setBadgeAttuale(badgeCorrente);\n  };\n\n  /**\r\n   * Gestisce la modifica del tipo di esercizio\r\n   */\n  const handleTipoEsercizioChange = e => {\n    setTipoEsercizio(e.target.value);\n    setTimeout(generaNuovoPrompt, 0);\n  };\n\n  /**\r\n   * Gestisce la modifica della modalità di correzione\r\n   */\n  const handleModalitaCorrezioneChange = e => {\n    setModalitaCorrezione(e.target.value);\n    // Se cambiamo modalità durante la scrittura, resettiamo gli errori\n    if (stato === 'scrittura') {\n      setErroriEvidenziati([]);\n      setSuggerimenti([]);\n    }\n  };\n\n  /**\r\n   * Gestisce i cambiamenti nel testo della textarea\r\n   */\n  const handleTestoChange = e => {\n    setTesto(e.target.value);\n    // Se siamo appena passati dallo stato 'inizio' allo stato 'scrittura'\n    if (stato === 'inizio') {\n      setStato('scrittura');\n    }\n  };\n\n  /**\r\n   * Inizia un nuovo esercizio\r\n   */\n  const iniziaNuovoEsercizio = () => {\n    generaNuovoPrompt();\n    if (textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  };\n\n  /**\r\n   * Invia il testo per l'analisi finale\r\n   */\n  const inviaPerFeedback = () => {\n    if (testo.trim().length < 10) {\n      alert(\"Il testo è troppo breve. Scrivi almeno qualche frase.\");\n      return;\n    }\n    setStato('feedback');\n    analizzaTesto(testo, true); // true indica che è un'analisi finale\n\n    // Simuliamo l'aggiunta di punti all'utente\n    const puntiGuadagnati = Math.floor(Math.random() * 30) + 20; // 20-50 punti\n    const nuoviPuntiTotali = puntiUtente + puntiGuadagnati;\n    setPuntiUtente(nuoviPuntiTotali);\n\n    // Ricalcoliamo il badge\n    setTimeout(() => {\n      calcolaBadgeAttuale();\n    }, 500);\n  };\n\n  /**\r\n   * Analizza il testo per trovare errori e generare suggerimenti\r\n   * In un'implementazione reale, questa funzione chiamerebbe un'API di analisi linguistica\r\n   */\n  const analizzaTesto = (testoAnalizzare, isFeedbackFinale = false) => {\n    // Simuliamo l'analisi del testo\n    // In un'implementazione reale, questa sarebbe una chiamata API a un servizio di NLP\n\n    const parole = testoAnalizzare.split(/\\s+/);\n    const erroriSimulati = [];\n    const suggerimentiGenerati = [];\n\n    // Simuliamo alcuni errori comuni\n    if (testoAnalizzare.length > 20) {\n      // Verifichiamo la punteggiatura finale\n      if (!testoAnalizzare.trim().match(/[.!?]$/)) {\n        erroriSimulati.push({\n          tipo: 'punteggiatura',\n          descrizione: 'Manca la punteggiatura finale',\n          indice: testoAnalizzare.length - 1\n        });\n        const regolaRandom = regoleGrammaticali.punteggiatura[0];\n        suggerimentiGenerati.push(regolaRandom.regola);\n      }\n\n      // Verifichiamo l'uso delle maiuscole dopo i punti\n      const frasi = testoAnalizzare.split(/[.!?]+\\s+/);\n      for (let i = 1; i < frasi.length; i++) {\n        if (frasi[i].length > 0 && frasi[i][0] !== frasi[i][0].toUpperCase()) {\n          const posizioneErrore = testoAnalizzare.indexOf(frasi[i]);\n          erroriSimulati.push({\n            tipo: 'maiuscole',\n            descrizione: 'Inizia la frase con la lettera maiuscola',\n            indice: posizioneErrore\n          });\n          suggerimentiGenerati.push(\"Inizia ogni frase con una lettera maiuscola.\");\n          break;\n        }\n      }\n\n      // Simuliamo errori di ripetizione\n      const paroleUniche = new Set(parole);\n      if (parole.length > 3 && paroleUniche.size < parole.length * 0.8) {\n        suggerimentiGenerati.push(\"Cerca di variare il vocabolario per rendere il testo più interessante.\");\n      }\n    }\n\n    // Aggiungiamo alcuni suggerimenti casuali per la modalità di feedback finale\n    if (isFeedbackFinale) {\n      // Suggerimenti in base alla lunghezza del testo\n      if (parole.length < 50) {\n        suggerimentiGenerati.push(\"Cerca di sviluppare maggiormente le tue idee per arricchire il testo.\");\n      } else if (parole.length > 200) {\n        suggerimentiGenerati.push(\"Il testo è ben sviluppato. Assicurati che ogni parte sia rilevante per l'argomento principale.\");\n      }\n\n      // Suggerimenti casuali basati sul tipo di esercizio\n      if (tipoEsercizio === 'scritturaLibera') {\n        suggerimentiGenerati.push(\"Nella scrittura libera, è importante mantenere un filo logico tra i paragrafi.\");\n      } else if (tipoEsercizio === 'descrizioneImmagine') {\n        suggerimentiGenerati.push(\"Nelle descrizioni, cerca di utilizzare aggettivi vividi che trasmettano sensazioni.\");\n      } else if (tipoEsercizio === 'riscritturaTesti') {\n        suggerimentiGenerati.push(\"Nella riscrittura, assicurati di mantenere il significato originale cambiando il registro linguistico.\");\n      }\n\n      // Aggiungiamo un suggerimento in stile karate \n      suggerimentiGenerati.push(\"Come nel karate, la precisione è più importante della velocità. Rileggi sempre i tuoi testi con attenzione.\");\n    }\n\n    // Aggiorniamo gli stati con gli errori e i suggerimenti\n    setErroriEvidenziati(erroriSimulati);\n    setSuggerimenti([...new Set(suggerimentiGenerati)]); // Rimuoviamo i duplicati\n  };\n\n  /**\r\n   * Renderizza il prompt appropriato per il tipo di esercizio\r\n   */\n  const renderPrompt = () => {\n    switch (prompt.tipo) {\n      case 'scritturaLibera':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"esercizio-prompt\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Scrivi liberamente\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: prompt.testo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"karate-quote\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: randomQuote\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this);\n      case 'descrizioneImmagine':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"esercizio-prompt\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Descrivi l'immagine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"immagine-simulata\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa fa-image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 18\n              }, this), \" \", prompt.descrizione]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: prompt.richiesta\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"karate-quote\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: randomQuote\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this);\n      case 'riscritturaTesti':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"esercizio-prompt\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Riscrivi il testo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"testo-originale\",\n            children: prompt.originale\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: prompt.richiesta\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"karate-quote\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: randomQuote\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"esercizio-prompt\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Seleziona un tipo di esercizio per iniziare.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"karate-quote\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: randomQuote\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this);\n    }\n  };\n\n  /**\r\n   * Renderizza il pannello di feedback dopo l'invio del testo\r\n   */\n  const renderFeedbackPanel = () => {\n    if (stato !== 'feedback') return null;\n\n    // Calcoliamo la qualità del testo\n    const lunghezzaTesto = testo.length;\n    const numeroErrori = erroriEvidenziati.length;\n    let qualita;\n    if (lunghezzaTesto < 50) {\n      qualita = \"migliorabile\";\n    } else if (numeroErrori > 3) {\n      qualita = \"buona, con margini di miglioramento\";\n    } else {\n      qualita = \"ottima\";\n    }\n\n    // Simuliamo un voto su 10\n    const votoBase = lunghezzaTesto > 200 ? 8 : lunghezzaTesto > 100 ? 7 : 6;\n    const votoFinale = Math.max(5, Math.min(10, votoBase - numeroErrori * 0.5));\n    const puntiGuadagnati = Math.floor(Math.random() * 30) + 20; // 20-50 punti\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feedback-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Feedback del Sensei\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"valutazione\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voto\",\n          children: votoFinale.toFixed(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"descrizione-voto\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"La qualit\\xE0 del tuo testo \\xE8 \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: qualita\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 43\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Hai guadagnato \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"punti-guadagnati\",\n              children: [\"+\", puntiGuadagnati, \" punti\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), suggerimenti.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"suggerimenti-linguistici\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Suggerimenti per migliorare:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: suggerimenti.map((suggerimento, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: suggerimento\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prossimo-badge\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Il tuo progresso:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"badge-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"badge-icon\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `current-belt current-belt-${badgeAttuale.color || 'white'}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"badge-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Livello attuale:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 18\n              }, this), \" \", badgeAttuale.nome]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: badgeAttuale.descrizione\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 15\n            }, this), badgeAttuale.nome !== badgeLevels[badgeLevels.length - 1].nome && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-bar\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"progress-fill\",\n                  style: {\n                    width: `${Math.min(100, (puntiUtente - badgeAttuale.puntiRichiesti) / (getProssimoLivelloBadge().puntiRichiesti - badgeAttuale.puntiRichiesti) * 100)}%`\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 453,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"next-level\",\n                children: [\"Prossimo livello: \", getProssimoLivelloBadge().nome, \" (\", getProssimoLivelloBadge().puntiRichiesti - puntiUtente, \" punti mancanti)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"primary-btn\",\n        onClick: iniziaNuovoEsercizio,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa fa-plus-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 11\n        }, this), \" Nuovo Esercizio\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 7\n    }, this);\n  };\n\n  /**\r\n   * Ottiene il prossimo livello badge\r\n   */\n  const getProssimoLivelloBadge = () => {\n    const currentIndex = badgeLevels.findIndex(b => b.nome === badgeAttuale.nome);\n    if (currentIndex < badgeLevels.length - 1) {\n      return badgeLevels[currentIndex + 1];\n    }\n    return badgeAttuale; // Già al massimo livello\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sezione-scrittura-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scrittura-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Esercizi di Scrittura\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"badge-attuale\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `belt-icon belt-${badgeAttuale.color || 'white'}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"badge-text\",\n          children: badgeAttuale.nome\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tipo-esercizio-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Tipo di esercizio:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: tipoEsercizio,\n          onChange: handleTipoEsercizioChange,\n          disabled: stato === 'scrittura' || stato === 'feedback',\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"scritturaLibera\",\n            children: \"Scrittura libera\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"descrizioneImmagine\",\n            children: \"Descrizione immagine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"riscritturaTesti\",\n            children: \"Riscrittura testi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modalita-correzione-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Modalit\\xE0 di correzione:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: modalitaCorrezione,\n          onChange: handleModalitaCorrezioneChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"finale\",\n            children: \"Alla fine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"itinere\",\n            children: \"In itinere\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this), renderPrompt(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: textareaRef,\n        value: testo,\n        onChange: handleTestoChange,\n        placeholder: \"Inizia a scrivere qui...\",\n        className: `testo-editor ${stato === 'feedback' ? 'readonly' : ''}`,\n        readOnly: stato === 'feedback'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), erroriEvidenziati.length > 0 && modalitaCorrezione === 'itinere' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errori-inline\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Suggerimenti:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: erroriEvidenziati.map((errore, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: errore.descrizione\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 11\n      }, this), stato === 'scrittura' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"primary-btn\",\n          onClick: inviaPerFeedback,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-check-circle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 15\n          }, this), \" Invia per Feedback\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this), renderFeedbackPanel()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 486,\n    columnNumber: 5\n  }, this);\n};\n_s(SezioneScrittura, \"nN2wWC7fAkAzTIL1lMBTAoz0OEg=\");\n_c = SezioneScrittura;\nexport default SezioneScrittura;\nvar _c;\n$RefreshReg$(_c, \"SezioneScrittura\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","promptsDatabase","scritturaLibera","descrizioneImmagine","id","descrizione","richiesta","riscritturaTesti","originale","regoleGrammaticali","punteggiatura","errore","regola","ortografia","sintassi","badgeLevels","nome","puntiRichiesti","color","karateQuotes","SezioneScrittura","_s","tipoEsercizio","setTipoEsercizio","prompt","setPrompt","testo","setTesto","modalitaCorrezione","setModalitaCorrezione","erroriEvidenziati","setErroriEvidenziati","suggerimenti","setSuggerimenti","stato","setStato","puntiUtente","setPuntiUtente","badgeAttuale","setBadgeAttuale","randomQuote","setRandomQuote","textareaRef","lastAnalysisTimeRef","generaNuovoPrompt","calcolaBadgeAttuale","quoteIndex","Math","floor","random","length","now","Date","current","analizzaTesto","nuovoPrompt","randomIndex","tipo","randomImg","randomText","badgeCorrente","i","handleTipoEsercizioChange","e","target","value","setTimeout","handleModalitaCorrezioneChange","handleTestoChange","iniziaNuovoEsercizio","focus","inviaPerFeedback","trim","alert","puntiGuadagnati","nuoviPuntiTotali","testoAnalizzare","isFeedbackFinale","parole","split","erroriSimulati","suggerimentiGenerati","match","push","indice","regolaRandom","frasi","toUpperCase","posizioneErrore","indexOf","paroleUniche","Set","size","renderPrompt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","renderFeedbackPanel","lunghezzaTesto","numeroErrori","qualita","votoBase","votoFinale","max","min","toFixed","map","suggerimento","index","style","width","getProssimoLivelloBadge","onClick","currentIndex","findIndex","b","onChange","disabled","ref","placeholder","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/Utente/lingua-kai-platform - restructured/src/components/components/SezioneScrittura/SezioneScrittura.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './SezioneScrittura.css';\r\n\r\n// Database di prompt/stimoli per i diversi tipi di esercizi\r\nconst promptsDatabase = {\r\n  // Prompt per la scrittura libera\r\n  scritturaLibera: [\r\n    \"Racconta una giornata indimenticabile della tua vita.\",\r\n    \"Descrivi il tuo luogo preferito e spiega perché è speciale per te.\",\r\n    \"Se potessi viaggiare in qualsiasi periodo storico, quale sceglieresti e perché?\",\r\n    \"Scrivi una lettera al tuo futuro io tra 10 anni.\",\r\n    \"Immagina di essere invisibile per un giorno. Come lo trascorreresti?\"\r\n  ],\r\n  \r\n  // Prompt per descrizione di immagini\r\n  descrizioneImmagine: [\r\n    { \r\n      id: \"img1\", \r\n      descrizione: \"Un tramonto sul mare con una barca in lontananza.\", \r\n      richiesta: \"Descrivi questa scena e le emozioni che potrebbe suscitare.\"\r\n    },\r\n    { \r\n      id: \"img2\", \r\n      descrizione: \"Una piazza affollata di una città europea.\", \r\n      richiesta: \"Descrivi l'atmosfera di questa piazza e le persone che la popolano.\"\r\n    },\r\n    { \r\n      id: \"img3\", \r\n      descrizione: \"Un bosco autunnale con foglie colorate.\", \r\n      richiesta: \"Descrivi i colori e le sensazioni di questo paesaggio autunnale.\"\r\n    },\r\n    { \r\n      id: \"img4\", \r\n      descrizione: \"Un mercato tradizionale con bancarelle colorate.\", \r\n      richiesta: \"Descrivi i profumi, i colori e i suoni di questo mercato.\"\r\n    }\r\n  ],\r\n  \r\n  // Testi da riscrivere con modifiche\r\n  riscritturaTesti: [\r\n    {\r\n      originale: \"Ciao Marco! Come stai? Io sto bene. Ti scrivo per invitarti alla mia festa di compleanno sabato. Ci saranno tanti amici e faremo una grigliata. Spero proprio che tu possa venire! A presto!\",\r\n      richiesta: \"Riscrivi questo messaggio in un registro formale, come se fosse una comunicazione ufficiale.\"\r\n    },\r\n    {\r\n      originale: \"Il sottoscritto, Dott. Rossi, in qualità di dirigente dell'ufficio amministrativo, con la presente comunica che in data 15/05 si terrà una riunione straordinaria atta a discutere le nuove direttive aziendali. Si richiede gentilmente la presenza di tutto il personale.\",\r\n      richiesta: \"Riscrivi questa comunicazione formale in un tono più informale e amichevole.\"\r\n    },\r\n    {\r\n      originale: \"La manifestazione avrà luogo il giorno 10 aprile p.v. alle ore 18.00 presso l'Auditorium comunale. È richiesto un abbigliamento consono all'evento.\",\r\n      richiesta: \"Riscrivi questo annuncio in uno stile più giovanile e accattivante.\"\r\n    },\r\n    {\r\n      originale: \"L'azienda informa che, a seguito di interventi di manutenzione straordinaria, gli uffici rimarranno chiusi dal 10 al 15 agosto.\",\r\n      richiesta: \"Riscrivi questo avviso in modo più dettagliato ed empatico verso i destinatari.\"\r\n    }\r\n  ]\r\n};\r\n\r\n// Regole grammaticali comuni per i suggerimenti\r\nconst regoleGrammaticali = {\r\n  punteggiatura: [\r\n    { errore: \"mancanza di punto\", regola: \"Ricorda di terminare le frasi con un punto.\" },\r\n    { errore: \"mancanza di virgola\", regola: \"Usa la virgola per separare gli elementi di un elenco o le proposizioni.\" }\r\n  ],\r\n  ortografia: [\r\n    { errore: \"apostrofo\", regola: \"Ricorda che l'apostrofo si usa per indicare l'elisione di una vocale.\" },\r\n    { errore: \"doppie\", regola: \"Le consonanti doppie modificano la pronuncia e il significato delle parole.\" }\r\n  ],\r\n  sintassi: [\r\n    { errore: \"concordanza soggetto-verbo\", regola: \"Il verbo deve concordare con il soggetto in numero e persona.\" },\r\n    { errore: \"uso del congiuntivo\", regola: \"Il congiuntivo si usa nelle frasi che esprimono dubbio, possibilità o desiderio.\" }\r\n  ]\r\n};\r\n\r\n// Livelli di badge ispirati alle cinture del karate\r\nconst badgeLevels = [\r\n  { nome: \"Cintura Bianca\", descrizione: \"Primi passi nella scrittura\", puntiRichiesti: 0, color: \"white\" },\r\n  { nome: \"Cintura Gialla\", descrizione: \"Conoscenze di base\", puntiRichiesti: 100, color: \"yellow\" },\r\n  { nome: \"Cintura Arancione\", descrizione: \"Competenze in crescita\", puntiRichiesti: 250, color: \"orange\" },\r\n  { nome: \"Cintura Verde\", descrizione: \"Buona padronanza linguistica\", puntiRichiesti: 500, color: \"green\" },\r\n  { nome: \"Cintura Blu\", descrizione: \"Capacità avanzate\", puntiRichiesti: 800, color: \"blue\" },\r\n  { nome: \"Cintura Marrone\", descrizione: \"Scrittore esperto\", puntiRichiesti: 1200, color: \"brown\" },\r\n  { nome: \"Cintura Nera\", descrizione: \"Maestria linguistica\", puntiRichiesti: 2000, color: \"black\" }\r\n];\r\n\r\n// Citazioni sulla disciplina e l'apprendimento dai maestri di karate\r\nconst karateQuotes = [\r\n  \"\\\"Il karate è come l'acqua bollente; senza calore costante, torna ad essere tiepido.\\\" - Gichin Funakoshi\",\r\n  \"\\\"Il miglioramento è sempre possibile, non importa da quanto tempo pratichi.\\\" - Shoshin Nagamine\",\r\n  \"\\\"La perfezione del carattere è la meta ultima.\\\" - Gichin Funakoshi\",\r\n  \"\\\"Prima di vincere gli altri, devi vincere te stesso.\\\" - Proverbio del karate\",\r\n  \"\\\"Non temere di camminare lentamente, temi solo di fermarti.\\\" - Antico detto del karate\",\r\n  \"\\\"La pratica costante è il segreto dell'apprendimento.\\\" - Masatoshi Nakayama\"\r\n];\r\n\r\nconst SezioneScrittura = () => {\r\n  // Stati per il componente\r\n  const [tipoEsercizio, setTipoEsercizio] = useState('scritturaLibera');\r\n  const [prompt, setPrompt] = useState({});\r\n  const [testo, setTesto] = useState('');\r\n  const [modalitaCorrezione, setModalitaCorrezione] = useState('finale');\r\n  const [erroriEvidenziati, setErroriEvidenziati] = useState([]);\r\n  const [suggerimenti, setSuggerimenti] = useState([]);\r\n  const [stato, setStato] = useState('inizio'); // 'inizio', 'scrittura', 'feedback'\r\n  const [puntiUtente, setPuntiUtente] = useState(320); // Simuliamo un utente con alcuni punti\r\n  const [badgeAttuale, setBadgeAttuale] = useState({});\r\n  const [randomQuote, setRandomQuote] = useState('');\r\n  \r\n  // Refs\r\n  const textareaRef = useRef(null);\r\n  const lastAnalysisTimeRef = useRef(0);\r\n  \r\n  // Effetto per generare un prompt iniziale e calcolare il badge attuale\r\n  useEffect(() => {\r\n    generaNuovoPrompt();\r\n    calcolaBadgeAttuale();\r\n    // Seleziona una citazione casuale\r\n    const quoteIndex = Math.floor(Math.random() * karateQuotes.length);\r\n    setRandomQuote(karateQuotes[quoteIndex]);\r\n  }, []);\r\n  \r\n  // Effetto per analizzare il testo durante la scrittura (solo in modalità in itinere)\r\n  useEffect(() => {\r\n    if (modalitaCorrezione === 'itinere' && testo && stato === 'scrittura') {\r\n      const now = Date.now();\r\n      // Analizziamo solo ogni 1.5 secondi per non sovraccaricare l'interfaccia\r\n      if (now - lastAnalysisTimeRef.current > 1500) {\r\n        analizzaTesto(testo);\r\n        lastAnalysisTimeRef.current = now;\r\n      }\r\n    }\r\n  }, [testo, modalitaCorrezione, stato]);\r\n  \r\n  /**\r\n   * Genera un nuovo prompt in base al tipo di esercizio selezionato\r\n   */\r\n  const generaNuovoPrompt = () => {\r\n    let nuovoPrompt;\r\n    \r\n    switch(tipoEsercizio) {\r\n      case 'scritturaLibera':\r\n        const randomIndex = Math.floor(Math.random() * promptsDatabase.scritturaLibera.length);\r\n        nuovoPrompt = {\r\n          testo: promptsDatabase.scritturaLibera[randomIndex],\r\n          tipo: 'scritturaLibera'\r\n        };\r\n        break;\r\n      \r\n      case 'descrizioneImmagine':\r\n        const randomImg = Math.floor(Math.random() * promptsDatabase.descrizioneImmagine.length);\r\n        nuovoPrompt = promptsDatabase.descrizioneImmagine[randomImg];\r\n        nuovoPrompt.tipo = 'descrizioneImmagine';\r\n        break;\r\n      \r\n      case 'riscritturaTesti':\r\n        const randomText = Math.floor(Math.random() * promptsDatabase.riscritturaTesti.length);\r\n        nuovoPrompt = promptsDatabase.riscritturaTesti[randomText];\r\n        nuovoPrompt.tipo = 'riscritturaTesti';\r\n        break;\r\n      \r\n      default:\r\n        nuovoPrompt = {\r\n          testo: \"Scrivi un breve testo su un argomento a tua scelta.\",\r\n          tipo: 'scritturaLibera'\r\n        };\r\n    }\r\n    \r\n    setPrompt(nuovoPrompt);\r\n    setTesto('');\r\n    setErroriEvidenziati([]);\r\n    setSuggerimenti([]);\r\n    setStato('inizio');\r\n    \r\n    // Seleziona una nuova citazione casuale\r\n    const quoteIndex = Math.floor(Math.random() * karateQuotes.length);\r\n    setRandomQuote(karateQuotes[quoteIndex]);\r\n  };\r\n  \r\n  /**\r\n   * Calcola il badge attuale dell'utente in base ai punti\r\n   */\r\n  const calcolaBadgeAttuale = () => {\r\n    let badgeCorrente = badgeLevels[0]; // Iniziamo dalla cintura bianca\r\n    \r\n    for (let i = 1; i < badgeLevels.length; i++) {\r\n      if (puntiUtente >= badgeLevels[i].puntiRichiesti) {\r\n        badgeCorrente = badgeLevels[i];\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    \r\n    setBadgeAttuale(badgeCorrente);\r\n  };\r\n  \r\n  /**\r\n   * Gestisce la modifica del tipo di esercizio\r\n   */\r\n  const handleTipoEsercizioChange = (e) => {\r\n    setTipoEsercizio(e.target.value);\r\n    setTimeout(generaNuovoPrompt, 0);\r\n  };\r\n  \r\n  /**\r\n   * Gestisce la modifica della modalità di correzione\r\n   */\r\n  const handleModalitaCorrezioneChange = (e) => {\r\n    setModalitaCorrezione(e.target.value);\r\n    // Se cambiamo modalità durante la scrittura, resettiamo gli errori\r\n    if (stato === 'scrittura') {\r\n      setErroriEvidenziati([]);\r\n      setSuggerimenti([]);\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Gestisce i cambiamenti nel testo della textarea\r\n   */\r\n  const handleTestoChange = (e) => {\r\n    setTesto(e.target.value);\r\n    // Se siamo appena passati dallo stato 'inizio' allo stato 'scrittura'\r\n    if (stato === 'inizio') {\r\n      setStato('scrittura');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Inizia un nuovo esercizio\r\n   */\r\n  const iniziaNuovoEsercizio = () => {\r\n    generaNuovoPrompt();\r\n    if (textareaRef.current) {\r\n      textareaRef.current.focus();\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Invia il testo per l'analisi finale\r\n   */\r\n  const inviaPerFeedback = () => {\r\n    if (testo.trim().length < 10) {\r\n      alert(\"Il testo è troppo breve. Scrivi almeno qualche frase.\");\r\n      return;\r\n    }\r\n    \r\n    setStato('feedback');\r\n    analizzaTesto(testo, true); // true indica che è un'analisi finale\r\n    \r\n    // Simuliamo l'aggiunta di punti all'utente\r\n    const puntiGuadagnati = Math.floor(Math.random() * 30) + 20; // 20-50 punti\r\n    const nuoviPuntiTotali = puntiUtente + puntiGuadagnati;\r\n    setPuntiUtente(nuoviPuntiTotali);\r\n    \r\n    // Ricalcoliamo il badge\r\n    setTimeout(() => {\r\n      calcolaBadgeAttuale();\r\n    }, 500);\r\n  };\r\n  \r\n  /**\r\n   * Analizza il testo per trovare errori e generare suggerimenti\r\n   * In un'implementazione reale, questa funzione chiamerebbe un'API di analisi linguistica\r\n   */\r\n  const analizzaTesto = (testoAnalizzare, isFeedbackFinale = false) => {\r\n    // Simuliamo l'analisi del testo\r\n    // In un'implementazione reale, questa sarebbe una chiamata API a un servizio di NLP\r\n    \r\n    const parole = testoAnalizzare.split(/\\s+/);\r\n    const erroriSimulati = [];\r\n    const suggerimentiGenerati = [];\r\n    \r\n    // Simuliamo alcuni errori comuni\r\n    if (testoAnalizzare.length > 20) {\r\n      // Verifichiamo la punteggiatura finale\r\n      if (!testoAnalizzare.trim().match(/[.!?]$/)) {\r\n        erroriSimulati.push({\r\n          tipo: 'punteggiatura',\r\n          descrizione: 'Manca la punteggiatura finale',\r\n          indice: testoAnalizzare.length - 1\r\n        });\r\n        \r\n        const regolaRandom = regoleGrammaticali.punteggiatura[0];\r\n        suggerimentiGenerati.push(regolaRandom.regola);\r\n      }\r\n      \r\n      // Verifichiamo l'uso delle maiuscole dopo i punti\r\n      const frasi = testoAnalizzare.split(/[.!?]+\\s+/);\r\n      for (let i = 1; i < frasi.length; i++) {\r\n        if (frasi[i].length > 0 && frasi[i][0] !== frasi[i][0].toUpperCase()) {\r\n          const posizioneErrore = testoAnalizzare.indexOf(frasi[i]);\r\n          erroriSimulati.push({\r\n            tipo: 'maiuscole',\r\n            descrizione: 'Inizia la frase con la lettera maiuscola',\r\n            indice: posizioneErrore\r\n          });\r\n          \r\n          suggerimentiGenerati.push(\"Inizia ogni frase con una lettera maiuscola.\");\r\n          break;\r\n        }\r\n      }\r\n      \r\n      // Simuliamo errori di ripetizione\r\n      const paroleUniche = new Set(parole);\r\n      if (parole.length > 3 && paroleUniche.size < parole.length * 0.8) {\r\n        suggerimentiGenerati.push(\"Cerca di variare il vocabolario per rendere il testo più interessante.\");\r\n      }\r\n    }\r\n    \r\n    // Aggiungiamo alcuni suggerimenti casuali per la modalità di feedback finale\r\n    if (isFeedbackFinale) {\r\n      // Suggerimenti in base alla lunghezza del testo\r\n      if (parole.length < 50) {\r\n        suggerimentiGenerati.push(\"Cerca di sviluppare maggiormente le tue idee per arricchire il testo.\");\r\n      } else if (parole.length > 200) {\r\n        suggerimentiGenerati.push(\"Il testo è ben sviluppato. Assicurati che ogni parte sia rilevante per l'argomento principale.\");\r\n      }\r\n      \r\n      // Suggerimenti casuali basati sul tipo di esercizio\r\n      if (tipoEsercizio === 'scritturaLibera') {\r\n        suggerimentiGenerati.push(\"Nella scrittura libera, è importante mantenere un filo logico tra i paragrafi.\");\r\n      } else if (tipoEsercizio === 'descrizioneImmagine') {\r\n        suggerimentiGenerati.push(\"Nelle descrizioni, cerca di utilizzare aggettivi vividi che trasmettano sensazioni.\");\r\n      } else if (tipoEsercizio === 'riscritturaTesti') {\r\n        suggerimentiGenerati.push(\"Nella riscrittura, assicurati di mantenere il significato originale cambiando il registro linguistico.\");\r\n      }\r\n      \r\n      // Aggiungiamo un suggerimento in stile karate \r\n      suggerimentiGenerati.push(\"Come nel karate, la precisione è più importante della velocità. Rileggi sempre i tuoi testi con attenzione.\");\r\n    }\r\n    \r\n    // Aggiorniamo gli stati con gli errori e i suggerimenti\r\n    setErroriEvidenziati(erroriSimulati);\r\n    setSuggerimenti([...new Set(suggerimentiGenerati)]); // Rimuoviamo i duplicati\r\n  };\r\n  \r\n  /**\r\n   * Renderizza il prompt appropriato per il tipo di esercizio\r\n   */\r\n  const renderPrompt = () => {\r\n    switch(prompt.tipo) {\r\n      case 'scritturaLibera':\r\n        return (\r\n          <div className=\"esercizio-prompt\">\r\n            <h3>Scrivi liberamente</h3>\r\n            <p>{prompt.testo}</p>\r\n            <div className=\"karate-quote\">\r\n              <p>{randomQuote}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      \r\n      case 'descrizioneImmagine':\r\n        return (\r\n          <div className=\"esercizio-prompt\">\r\n            <h3>Descrivi l'immagine</h3>\r\n            <div className=\"immagine-simulata\">\r\n              <p><i className=\"fa fa-image\"></i> {prompt.descrizione}</p>\r\n            </div>\r\n            <p>{prompt.richiesta}</p>\r\n            <div className=\"karate-quote\">\r\n              <p>{randomQuote}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      \r\n      case 'riscritturaTesti':\r\n        return (\r\n          <div className=\"esercizio-prompt\">\r\n            <h3>Riscrivi il testo</h3>\r\n            <div className=\"testo-originale\">\r\n              {prompt.originale}\r\n            </div>\r\n            <p>{prompt.richiesta}</p>\r\n            <div className=\"karate-quote\">\r\n              <p>{randomQuote}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      \r\n      default:\r\n        return (\r\n          <div className=\"esercizio-prompt\">\r\n            <p>Seleziona un tipo di esercizio per iniziare.</p>\r\n            <div className=\"karate-quote\">\r\n              <p>{randomQuote}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Renderizza il pannello di feedback dopo l'invio del testo\r\n   */\r\n  const renderFeedbackPanel = () => {\r\n    if (stato !== 'feedback') return null;\r\n    \r\n    // Calcoliamo la qualità del testo\r\n    const lunghezzaTesto = testo.length;\r\n    const numeroErrori = erroriEvidenziati.length;\r\n    \r\n    let qualita;\r\n    if (lunghezzaTesto < 50) {\r\n      qualita = \"migliorabile\";\r\n    } else if (numeroErrori > 3) {\r\n      qualita = \"buona, con margini di miglioramento\";\r\n    } else {\r\n      qualita = \"ottima\";\r\n    }\r\n    \r\n    // Simuliamo un voto su 10\r\n    const votoBase = lunghezzaTesto > 200 ? 8 : (lunghezzaTesto > 100 ? 7 : 6);\r\n    const votoFinale = Math.max(5, Math.min(10, votoBase - (numeroErrori * 0.5)));\r\n    const puntiGuadagnati = Math.floor(Math.random() * 30) + 20; // 20-50 punti\r\n    \r\n    return (\r\n      <div className=\"feedback-panel\">\r\n        <h3>Feedback del Sensei</h3>\r\n        \r\n        <div className=\"valutazione\">\r\n          <div className=\"voto\">{votoFinale.toFixed(1)}</div>\r\n          <div className=\"descrizione-voto\">\r\n            <p>La qualità del tuo testo è <strong>{qualita}</strong>.</p>\r\n            <p>Hai guadagnato <strong className=\"punti-guadagnati\">+{puntiGuadagnati} punti</strong></p>\r\n          </div>\r\n        </div>\r\n        \r\n        {suggerimenti.length > 0 && (\r\n          <div className=\"suggerimenti-linguistici\">\r\n            <h4>Suggerimenti per migliorare:</h4>\r\n            <ul>\r\n              {suggerimenti.map((suggerimento, index) => (\r\n                <li key={index}>{suggerimento}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"prossimo-badge\">\r\n          <h4>Il tuo progresso:</h4>\r\n          <div className=\"badge-info\">\r\n            <div className=\"badge-icon\">\r\n              <div className={`current-belt current-belt-${badgeAttuale.color || 'white'}`}></div>\r\n            </div>\r\n            <div className=\"badge-details\">\r\n              <p><strong>Livello attuale:</strong> {badgeAttuale.nome}</p>\r\n              <p>{badgeAttuale.descrizione}</p>\r\n              \r\n              {badgeAttuale.nome !== badgeLevels[badgeLevels.length - 1].nome && (\r\n                <>\r\n                  <div className=\"progress-bar\">\r\n                    <div \r\n                      className=\"progress-fill\" \r\n                      style={{ \r\n                        width: `${Math.min(100, ((puntiUtente - badgeAttuale.puntiRichiesti) / (getProssimoLivelloBadge().puntiRichiesti - badgeAttuale.puntiRichiesti)) * 100)}%` \r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  <p className=\"next-level\">Prossimo livello: {getProssimoLivelloBadge().nome} ({getProssimoLivelloBadge().puntiRichiesti - puntiUtente} punti mancanti)</p>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <button className=\"primary-btn\" onClick={iniziaNuovoEsercizio}>\r\n          <i className=\"fa fa-plus-circle\"></i> Nuovo Esercizio\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  /**\r\n   * Ottiene il prossimo livello badge\r\n   */\r\n  const getProssimoLivelloBadge = () => {\r\n    const currentIndex = badgeLevels.findIndex(b => b.nome === badgeAttuale.nome);\r\n    if (currentIndex < badgeLevels.length - 1) {\r\n      return badgeLevels[currentIndex + 1];\r\n    }\r\n    return badgeAttuale; // Già al massimo livello\r\n  };\r\n\r\n  return (\r\n    <div className=\"sezione-scrittura-container\">\r\n      <div className=\"scrittura-header\">\r\n        <h2>Esercizi di Scrittura</h2>\r\n        <div className=\"badge-attuale\">\r\n          <div className={`belt-icon belt-${badgeAttuale.color || 'white'}`}></div>\r\n          <span className=\"badge-text\">{badgeAttuale.nome}</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"controls-panel\">\r\n        <div className=\"tipo-esercizio-selector\">\r\n          <label>Tipo di esercizio:</label>\r\n          <select \r\n            value={tipoEsercizio}\r\n            onChange={handleTipoEsercizioChange}\r\n            disabled={stato === 'scrittura' || stato === 'feedback'}\r\n          >\r\n            <option value=\"scritturaLibera\">Scrittura libera</option>\r\n            <option value=\"descrizioneImmagine\">Descrizione immagine</option>\r\n            <option value=\"riscritturaTesti\">Riscrittura testi</option>\r\n          </select>\r\n        </div>\r\n        \r\n        <div className=\"modalita-correzione-selector\">\r\n          <label>Modalità di correzione:</label>\r\n          <select \r\n            value={modalitaCorrezione}\r\n            onChange={handleModalitaCorrezioneChange}\r\n          >\r\n            <option value=\"finale\">Alla fine</option>\r\n            <option value=\"itinere\">In itinere</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      \r\n      {renderPrompt()}\r\n      \r\n      <div className=\"editor-container\">\r\n        <textarea\r\n          ref={textareaRef}\r\n          value={testo}\r\n          onChange={handleTestoChange}\r\n          placeholder=\"Inizia a scrivere qui...\"\r\n          className={`testo-editor ${stato === 'feedback' ? 'readonly' : ''}`}\r\n          readOnly={stato === 'feedback'}\r\n        ></textarea>\r\n        \r\n        {erroriEvidenziati.length > 0 && modalitaCorrezione === 'itinere' && (\r\n          <div className=\"errori-inline\">\r\n            <h4>Suggerimenti:</h4>\r\n            <ul>\r\n              {erroriEvidenziati.map((errore, index) => (\r\n                <li key={index}>{errore.descrizione}</li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n        \r\n        {stato === 'scrittura' && (\r\n          <div className=\"editor-actions\">\r\n            <button className=\"primary-btn\" onClick={inviaPerFeedback}>\r\n              <i className=\"fa fa-check-circle\"></i> Invia per Feedback\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      {renderFeedbackPanel()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SezioneScrittura;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}