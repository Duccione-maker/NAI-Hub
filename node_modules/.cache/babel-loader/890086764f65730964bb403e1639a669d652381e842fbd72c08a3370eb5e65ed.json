{"ast":null,"code":"// src/services/progressService.js\n/**\r\n * Service per gestire il progresso degli studenti per l'accesso alla sezione Letteratura\r\n */\n\n// Definizione degli stati possibili\nconst STATO_SIGILLO = {\n  INTATTO: 'intatto',\n  INCRINATO: 'incrinato',\n  ROTTO: 'rotto'\n};\n\n/**\r\n * Calcola lo stato dei sigilli per un utente\r\n * @param {Object} userProfile - Il profilo dell'utente\r\n * @returns {Object} - Lo stato di ogni sigillo con relativi progressi\r\n */\nexport const calcolaStatoSigilli = userProfile => {\n  if (!userProfile) return {};\n\n  // Definizione dei sigilli e dei requisiti\n  const sigilliConfig = [{\n    id: 'parola',\n    requisitoValoreTarget: 3,\n    categoria: 'lettura'\n  }, {\n    id: 'penna',\n    requisitoValoreTarget: 3,\n    categoria: 'scrittura'\n  }, {\n    id: 'segni',\n    requisitoValoreTarget: 2,\n    categoria: 'punteggiatura'\n  }, {\n    id: 'voci',\n    requisitoValoreTarget: 3,\n    categoria: 'registri'\n  }, {\n    id: 'torneo',\n    requisitoValoreTarget: 1,\n    categoria: 'torneo'\n  }, {\n    id: 'conoscenza',\n    requisitoValoreTarget: 2,\n    categoria: 'dojo'\n  }, {\n    id: 'maestro',\n    requisitoValoreTarget: 'arancione',\n    categoria: 'livello'\n  }];\n  const statoSigilli = {};\n\n  // Ottieni lo stato salvato dei sigilli (se esiste)\n  const sigilliSalvati = userProfile.sigilliLetteratura || {};\n  sigilliConfig.forEach(sigillo => {\n    // Se lo stato è già salvato, usalo\n    if (sigilliSalvati[sigillo.id]) {\n      statoSigilli[sigillo.id] = sigilliSalvati[sigillo.id];\n      return;\n    }\n\n    // Altrimenti calcola lo stato in base ai progressi dell'utente\n    const progressoAttuale = calcolaProgressoSigillo(sigillo, userProfile);\n    const percentualeCompletamento = sigillo.categoria === 'livello' ? progressoAttuale ? 100 : 0 : progressoAttuale / sigillo.requisitoValoreTarget * 100;\n    if (percentualeCompletamento >= 100) {\n      statoSigilli[sigillo.id] = {\n        stato: STATO_SIGILLO.ROTTO,\n        progresso: 100\n      };\n    } else if (percentualeCompletamento >= 50) {\n      statoSigilli[sigillo.id] = {\n        stato: STATO_SIGILLO.INCRINATO,\n        progresso: percentualeCompletamento\n      };\n    } else {\n      statoSigilli[sigillo.id] = {\n        stato: STATO_SIGILLO.INTATTO,\n        progresso: percentualeCompletamento\n      };\n    }\n  });\n  return statoSigilli;\n};\n\n/**\r\n * Calcola il progresso per un sigillo specifico\r\n * @param {Object} sigillo - Il sigillo da valutare\r\n * @param {Object} profilo - Il profilo dell'utente\r\n * @returns {number} - Il valore del progresso attuale\r\n */\nexport const calcolaProgressoSigillo = (sigillo, profilo) => {\n  var _profilo$letturaEserc, _profilo$letturaEserc2, _profilo$scritturaEse, _profilo$scritturaEse2, _profilo$punteggiatur, _profilo$registriUsat, _profilo$torneiComple, _profilo$studentiAiut;\n  if (!profilo) return 0;\n  switch (sigillo.categoria) {\n    case 'lettura':\n      return ((_profilo$letturaEserc = profilo.letturaEserciziCompletati) === null || _profilo$letturaEserc === void 0 ? void 0 : (_profilo$letturaEserc2 = _profilo$letturaEserc.filter(e => e.punteggio > 80)) === null || _profilo$letturaEserc2 === void 0 ? void 0 : _profilo$letturaEserc2.length) || 0;\n    case 'scrittura':\n      return ((_profilo$scritturaEse = profilo.scritturaEserciziCompletati) === null || _profilo$scritturaEse === void 0 ? void 0 : (_profilo$scritturaEse2 = _profilo$scritturaEse.filter(e => e.valutazionePositiva)) === null || _profilo$scritturaEse2 === void 0 ? void 0 : _profilo$scritturaEse2.length) || 0;\n    case 'punteggiatura':\n      return ((_profilo$punteggiatur = profilo.punteggiaturaEserciziAvanzatiCompletati) === null || _profilo$punteggiatur === void 0 ? void 0 : _profilo$punteggiatur.length) || 0;\n    case 'registri':\n      return ((_profilo$registriUsat = profilo.registriUsatiCorrettamente) === null || _profilo$registriUsat === void 0 ? void 0 : _profilo$registriUsat.length) || 0;\n    case 'torneo':\n      return ((_profilo$torneiComple = profilo.torneiCompletati) === null || _profilo$torneiComple === void 0 ? void 0 : _profilo$torneiComple.length) || 0;\n    case 'dojo':\n      return ((_profilo$studentiAiut = profilo.studentiAiutati) === null || _profilo$studentiAiut === void 0 ? void 0 : _profilo$studentiAiut.length) || 0;\n    case 'livello':\n      // Mappa le cinture a valori numerici\n      const livelloCinture = {\n        'bianca': 1,\n        'gialla': 2,\n        'arancione': 3,\n        'verde': 4,\n        'blu': 5,\n        'marrone': 6,\n        'nera': 7\n      };\n      const livelloAttualeValore = livelloCinture[profilo.livello] || 0;\n      const livelloRichiestoValore = livelloCinture['arancione'];\n      return livelloAttualeValore >= livelloRichiestoValore ? 1 : 0;\n    default:\n      return 0;\n  }\n};\n\n/**\r\n * Verifica se un utente ha completato tutti i requisiti per accedere alla sezione letteratura\r\n * @param {Object} userProfile - Il profilo dell'utente\r\n * @returns {boolean} - true se l'accesso è sbloccato, false altrimenti\r\n */\nexport const verificaAccessoLetteratura = userProfile => {\n  if (!userProfile) return false;\n\n  // Se l'accesso è già stato completato, restituiamo true\n  if (userProfile.accessoLetteraturaCompletato) {\n    return true;\n  }\n\n  // Calcola lo stato di tutti i sigilli\n  const statoSigilli = calcolaStatoSigilli(userProfile);\n\n  // Verifica se tutti i sigilli sono rotti\n  return Object.values(statoSigilli).every(sigillo => sigillo.stato === STATO_SIGILLO.ROTTO);\n};\n\n/**\r\n * Aggiorna lo stato dei sigilli nel profilo utente\r\n * @param {Object} userProfile - Il profilo dell'utente da aggiornare\r\n * @param {Object} nuovoStatoSigilli - Il nuovo stato dei sigilli\r\n * @returns {Object} - Il profilo aggiornato\r\n */\nexport const aggiornaSigilliProfilo = async (userProfile, nuovoStatoSigilli) => {\n  if (!userProfile) return null;\n  const profiloAggiornato = {\n    ...userProfile,\n    sigilliLetteratura: {\n      ...userProfile.sigilliLetteratura,\n      ...nuovoStatoSigilli\n    }\n  };\n\n  // Qui dovresti implementare la logica per salvare il profilo aggiornato\n  // ad esempio con una chiamata API o salvando nel localStorage\n\n  // Esempio con localStorage (per test)\n  localStorage.setItem('userProfile', JSON.stringify(profiloAggiornato));\n\n  // Esempio con API\n  // await api.updateUserProfile(profiloAggiornato);\n\n  return profiloAggiornato;\n};\n\n/**\r\n * Completa l'accesso alla sezione letteratura per un utente\r\n * @param {Object} userProfile - Il profilo dell'utente\r\n * @returns {Object} - Il profilo aggiornato\r\n */\nexport const completaAccessoLetteratura = async userProfile => {\n  if (!userProfile) return null;\n  const profiloAggiornato = {\n    ...userProfile,\n    accessoLetteraturaCompletato: true,\n    dataAccessoLetteratura: new Date().toISOString()\n  };\n\n  // Salva il profilo aggiornato\n  // Esempio con localStorage (per test)\n  localStorage.setItem('userProfile', JSON.stringify(profiloAggiornato));\n\n  // Esempio con API\n  // await api.updateUserProfile(profiloAggiornato);\n\n  return profiloAggiornato;\n};\n\n/**\r\n * Ottiene suggerimenti per completare i sigilli mancanti\r\n * @param {Object} userProfile - Il profilo dell'utente\r\n * @returns {Array} - Lista di suggerimenti per completare i sigilli\r\n */\nexport const getSuggerimentiSigilli = userProfile => {\n  if (!userProfile) return [];\n  const statoSigilli = calcolaStatoSigilli(userProfile);\n  const suggerimenti = [];\n\n  // Verifica i sigilli non completi e genera suggerimenti\n  Object.entries(statoSigilli).forEach(([id, stato]) => {\n    if (stato.stato !== STATO_SIGILLO.ROTTO) {\n      switch (id) {\n        case 'parola':\n          suggerimenti.push({\n            sigillo: 'Sigillo della Parola',\n            messaggio: 'Completa esercizi di lettura con un punteggio superiore all\\'80%',\n            progresso: `${Math.round(stato.progresso)}%`\n          });\n          break;\n        case 'penna':\n          suggerimenti.push({\n            sigillo: 'Sigillo della Penna',\n            messaggio: 'Scrivi e ottieni valutazioni positive nei tuoi esercizi di scrittura',\n            progresso: `${Math.round(stato.progresso)}%`\n          });\n          break;\n        case 'segni':\n          suggerimenti.push({\n            sigillo: 'Sigillo dei Segni',\n            messaggio: 'Completa esercizi avanzati sulla punteggiatura',\n            progresso: `${Math.round(stato.progresso)}%`\n          });\n          break;\n        case 'voci':\n          suggerimenti.push({\n            sigillo: 'Sigillo delle Voci',\n            messaggio: 'Usa correttamente diversi registri linguistici negli esercizi',\n            progresso: `${Math.round(stato.progresso)}%`\n          });\n          break;\n        case 'torneo':\n          suggerimenti.push({\n            sigillo: 'Sigillo del Torneo',\n            messaggio: 'Partecipa a un torneo completo',\n            progresso: `${Math.round(stato.progresso)}%`\n          });\n          break;\n        case 'conoscenza':\n          suggerimenti.push({\n            sigillo: 'Sigillo della Conoscenza',\n            messaggio: 'Aiuta i tuoi compagni nel Dojo della Conoscenza',\n            progresso: `${Math.round(stato.progresso)}%`\n          });\n          break;\n        case 'maestro':\n          suggerimenti.push({\n            sigillo: 'Sigillo del Maestro',\n            messaggio: 'Raggiungi almeno la cintura arancione',\n            progresso: `${Math.round(stato.progresso)}%`\n          });\n          break;\n      }\n    }\n  });\n  return suggerimenti;\n};\n\n/**\r\n * Concede l'accesso alla sezione letteratura per uno studente specifico\r\n * @param {string} studenteId - L'ID dello studente\r\n * @returns {Promise<boolean>} - true se l'operazione è riuscita\r\n */\nexport const concediAccessoLetteratura = async studenteId => {\n  if (!studenteId) return false;\n  try {\n    // In un'implementazione reale, faresti una chiamata API\n    // per ottenere il profilo dello studente e poi aggiornarlo\n\n    // Esempio con API (da implementare)\n    // const studenteProfile = await api.getUserProfile(studenteId);\n    // const profiloAggiornato = {\n    //   ...studenteProfile,\n    //   accessoLetteraturaCompletato: true,\n    //   dataAccessoLetteratura: new Date().toISOString()\n    // };\n    // await api.updateUserProfile(profiloAggiornato);\n\n    // Esempio con localStorage (per test)\n    const profiles = JSON.parse(localStorage.getItem('userProfiles') || '{}');\n    if (profiles[studenteId]) {\n      profiles[studenteId].accessoLetteraturaCompletato = true;\n      profiles[studenteId].dataAccessoLetteratura = new Date().toISOString();\n      localStorage.setItem('userProfiles', JSON.stringify(profiles));\n    }\n    return true;\n  } catch (error) {\n    console.error('Errore nella concessione dell\\'accesso:', error);\n    return false;\n  }\n};\nexport default {\n  calcolaStatoSigilli,\n  calcolaProgressoSigillo,\n  verificaAccessoLetteratura,\n  aggiornaSigilliProfilo,\n  completaAccessoLetteratura,\n  getSuggerimentiSigilli,\n  concediAccessoLetteratura\n};","map":{"version":3,"names":["STATO_SIGILLO","INTATTO","INCRINATO","ROTTO","calcolaStatoSigilli","userProfile","sigilliConfig","id","requisitoValoreTarget","categoria","statoSigilli","sigilliSalvati","sigilliLetteratura","forEach","sigillo","progressoAttuale","calcolaProgressoSigillo","percentualeCompletamento","stato","progresso","profilo","_profilo$letturaEserc","_profilo$letturaEserc2","_profilo$scritturaEse","_profilo$scritturaEse2","_profilo$punteggiatur","_profilo$registriUsat","_profilo$torneiComple","_profilo$studentiAiut","letturaEserciziCompletati","filter","e","punteggio","length","scritturaEserciziCompletati","valutazionePositiva","punteggiaturaEserciziAvanzatiCompletati","registriUsatiCorrettamente","torneiCompletati","studentiAiutati","livelloCinture","livelloAttualeValore","livello","livelloRichiestoValore","verificaAccessoLetteratura","accessoLetteraturaCompletato","Object","values","every","aggiornaSigilliProfilo","nuovoStatoSigilli","profiloAggiornato","localStorage","setItem","JSON","stringify","completaAccessoLetteratura","dataAccessoLetteratura","Date","toISOString","getSuggerimentiSigilli","suggerimenti","entries","push","messaggio","Math","round","concediAccessoLetteratura","studenteId","profiles","parse","getItem","error","console"],"sources":["C:/Users/Utente/lingua-kai-platform - restructured/src/services/progressService.js"],"sourcesContent":["// src/services/progressService.js\r\n/**\r\n * Service per gestire il progresso degli studenti per l'accesso alla sezione Letteratura\r\n */\r\n\r\n// Definizione degli stati possibili\r\nconst STATO_SIGILLO = {\r\n    INTATTO: 'intatto',\r\n    INCRINATO: 'incrinato',\r\n    ROTTO: 'rotto'\r\n  };\r\n  \r\n  /**\r\n   * Calcola lo stato dei sigilli per un utente\r\n   * @param {Object} userProfile - Il profilo dell'utente\r\n   * @returns {Object} - Lo stato di ogni sigillo con relativi progressi\r\n   */\r\n  export const calcolaStatoSigilli = (userProfile) => {\r\n    if (!userProfile) return {};\r\n    \r\n    // Definizione dei sigilli e dei requisiti\r\n    const sigilliConfig = [\r\n      {\r\n        id: 'parola',\r\n        requisitoValoreTarget: 3,\r\n        categoria: 'lettura',\r\n      },\r\n      {\r\n        id: 'penna',\r\n        requisitoValoreTarget: 3,\r\n        categoria: 'scrittura',\r\n      },\r\n      {\r\n        id: 'segni',\r\n        requisitoValoreTarget: 2,\r\n        categoria: 'punteggiatura',\r\n      },\r\n      {\r\n        id: 'voci',\r\n        requisitoValoreTarget: 3,\r\n        categoria: 'registri',\r\n      },\r\n      {\r\n        id: 'torneo',\r\n        requisitoValoreTarget: 1,\r\n        categoria: 'torneo',\r\n      },\r\n      {\r\n        id: 'conoscenza',\r\n        requisitoValoreTarget: 2,\r\n        categoria: 'dojo',\r\n      },\r\n      {\r\n        id: 'maestro',\r\n        requisitoValoreTarget: 'arancione',\r\n        categoria: 'livello',\r\n      }\r\n    ];\r\n    \r\n    const statoSigilli = {};\r\n    \r\n    // Ottieni lo stato salvato dei sigilli (se esiste)\r\n    const sigilliSalvati = userProfile.sigilliLetteratura || {};\r\n    \r\n    sigilliConfig.forEach(sigillo => {\r\n      // Se lo stato è già salvato, usalo\r\n      if (sigilliSalvati[sigillo.id]) {\r\n        statoSigilli[sigillo.id] = sigilliSalvati[sigillo.id];\r\n        return;\r\n      }\r\n      \r\n      // Altrimenti calcola lo stato in base ai progressi dell'utente\r\n      const progressoAttuale = calcolaProgressoSigillo(sigillo, userProfile);\r\n      const percentualeCompletamento = sigillo.categoria === 'livello' \r\n        ? (progressoAttuale ? 100 : 0) \r\n        : (progressoAttuale / sigillo.requisitoValoreTarget) * 100;\r\n      \r\n      if (percentualeCompletamento >= 100) {\r\n        statoSigilli[sigillo.id] = { stato: STATO_SIGILLO.ROTTO, progresso: 100 };\r\n      } else if (percentualeCompletamento >= 50) {\r\n        statoSigilli[sigillo.id] = { stato: STATO_SIGILLO.INCRINATO, progresso: percentualeCompletamento };\r\n      } else {\r\n        statoSigilli[sigillo.id] = { stato: STATO_SIGILLO.INTATTO, progresso: percentualeCompletamento };\r\n      }\r\n    });\r\n    \r\n    return statoSigilli;\r\n  };\r\n  \r\n  /**\r\n   * Calcola il progresso per un sigillo specifico\r\n   * @param {Object} sigillo - Il sigillo da valutare\r\n   * @param {Object} profilo - Il profilo dell'utente\r\n   * @returns {number} - Il valore del progresso attuale\r\n   */\r\n  export const calcolaProgressoSigillo = (sigillo, profilo) => {\r\n    if (!profilo) return 0;\r\n    \r\n    switch (sigillo.categoria) {\r\n      case 'lettura':\r\n        return profilo.letturaEserciziCompletati?.filter(e => e.punteggio > 80)?.length || 0;\r\n      case 'scrittura':\r\n        return profilo.scritturaEserciziCompletati?.filter(e => e.valutazionePositiva)?.length || 0;\r\n      case 'punteggiatura':\r\n        return profilo.punteggiaturaEserciziAvanzatiCompletati?.length || 0;\r\n      case 'registri':\r\n        return profilo.registriUsatiCorrettamente?.length || 0;\r\n      case 'torneo':\r\n        return profilo.torneiCompletati?.length || 0;\r\n      case 'dojo':\r\n        return profilo.studentiAiutati?.length || 0;\r\n      case 'livello':\r\n        // Mappa le cinture a valori numerici\r\n        const livelloCinture = {\r\n          'bianca': 1,\r\n          'gialla': 2,\r\n          'arancione': 3,\r\n          'verde': 4,\r\n          'blu': 5,\r\n          'marrone': 6,\r\n          'nera': 7\r\n        };\r\n        const livelloAttualeValore = livelloCinture[profilo.livello] || 0;\r\n        const livelloRichiestoValore = livelloCinture['arancione'];\r\n        return livelloAttualeValore >= livelloRichiestoValore ? 1 : 0;\r\n      default:\r\n        return 0;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Verifica se un utente ha completato tutti i requisiti per accedere alla sezione letteratura\r\n   * @param {Object} userProfile - Il profilo dell'utente\r\n   * @returns {boolean} - true se l'accesso è sbloccato, false altrimenti\r\n   */\r\n  export const verificaAccessoLetteratura = (userProfile) => {\r\n    if (!userProfile) return false;\r\n    \r\n    // Se l'accesso è già stato completato, restituiamo true\r\n    if (userProfile.accessoLetteraturaCompletato) {\r\n      return true;\r\n    }\r\n    \r\n    // Calcola lo stato di tutti i sigilli\r\n    const statoSigilli = calcolaStatoSigilli(userProfile);\r\n    \r\n    // Verifica se tutti i sigilli sono rotti\r\n    return Object.values(statoSigilli).every(\r\n      sigillo => sigillo.stato === STATO_SIGILLO.ROTTO\r\n    );\r\n  };\r\n  \r\n  /**\r\n   * Aggiorna lo stato dei sigilli nel profilo utente\r\n   * @param {Object} userProfile - Il profilo dell'utente da aggiornare\r\n   * @param {Object} nuovoStatoSigilli - Il nuovo stato dei sigilli\r\n   * @returns {Object} - Il profilo aggiornato\r\n   */\r\n  export const aggiornaSigilliProfilo = async (userProfile, nuovoStatoSigilli) => {\r\n    if (!userProfile) return null;\r\n    \r\n    const profiloAggiornato = {\r\n      ...userProfile,\r\n      sigilliLetteratura: {\r\n        ...userProfile.sigilliLetteratura,\r\n        ...nuovoStatoSigilli\r\n      }\r\n    };\r\n    \r\n    // Qui dovresti implementare la logica per salvare il profilo aggiornato\r\n    // ad esempio con una chiamata API o salvando nel localStorage\r\n    \r\n    // Esempio con localStorage (per test)\r\n    localStorage.setItem('userProfile', JSON.stringify(profiloAggiornato));\r\n    \r\n    // Esempio con API\r\n    // await api.updateUserProfile(profiloAggiornato);\r\n    \r\n    return profiloAggiornato;\r\n  };\r\n  \r\n  /**\r\n   * Completa l'accesso alla sezione letteratura per un utente\r\n   * @param {Object} userProfile - Il profilo dell'utente\r\n   * @returns {Object} - Il profilo aggiornato\r\n   */\r\n  export const completaAccessoLetteratura = async (userProfile) => {\r\n    if (!userProfile) return null;\r\n    \r\n    const profiloAggiornato = {\r\n      ...userProfile,\r\n      accessoLetteraturaCompletato: true,\r\n      dataAccessoLetteratura: new Date().toISOString()\r\n    };\r\n    \r\n    // Salva il profilo aggiornato\r\n    // Esempio con localStorage (per test)\r\n    localStorage.setItem('userProfile', JSON.stringify(profiloAggiornato));\r\n    \r\n    // Esempio con API\r\n    // await api.updateUserProfile(profiloAggiornato);\r\n    \r\n    return profiloAggiornato;\r\n  };\r\n  \r\n  /**\r\n   * Ottiene suggerimenti per completare i sigilli mancanti\r\n   * @param {Object} userProfile - Il profilo dell'utente\r\n   * @returns {Array} - Lista di suggerimenti per completare i sigilli\r\n   */\r\n  export const getSuggerimentiSigilli = (userProfile) => {\r\n    if (!userProfile) return [];\r\n    \r\n    const statoSigilli = calcolaStatoSigilli(userProfile);\r\n    const suggerimenti = [];\r\n    \r\n    // Verifica i sigilli non completi e genera suggerimenti\r\n    Object.entries(statoSigilli).forEach(([id, stato]) => {\r\n      if (stato.stato !== STATO_SIGILLO.ROTTO) {\r\n        switch (id) {\r\n          case 'parola':\r\n            suggerimenti.push({\r\n              sigillo: 'Sigillo della Parola',\r\n              messaggio: 'Completa esercizi di lettura con un punteggio superiore all\\'80%',\r\n              progresso: `${Math.round(stato.progresso)}%`\r\n            });\r\n            break;\r\n          case 'penna':\r\n            suggerimenti.push({\r\n              sigillo: 'Sigillo della Penna',\r\n              messaggio: 'Scrivi e ottieni valutazioni positive nei tuoi esercizi di scrittura',\r\n              progresso: `${Math.round(stato.progresso)}%`\r\n            });\r\n            break;\r\n          case 'segni':\r\n            suggerimenti.push({\r\n              sigillo: 'Sigillo dei Segni',\r\n              messaggio: 'Completa esercizi avanzati sulla punteggiatura',\r\n              progresso: `${Math.round(stato.progresso)}%`\r\n            });\r\n            break;\r\n          case 'voci':\r\n            suggerimenti.push({\r\n              sigillo: 'Sigillo delle Voci',\r\n              messaggio: 'Usa correttamente diversi registri linguistici negli esercizi',\r\n              progresso: `${Math.round(stato.progresso)}%`\r\n            });\r\n            break;\r\n          case 'torneo':\r\n            suggerimenti.push({\r\n              sigillo: 'Sigillo del Torneo',\r\n              messaggio: 'Partecipa a un torneo completo',\r\n              progresso: `${Math.round(stato.progresso)}%`\r\n            });\r\n            break;\r\n          case 'conoscenza':\r\n            suggerimenti.push({\r\n              sigillo: 'Sigillo della Conoscenza',\r\n              messaggio: 'Aiuta i tuoi compagni nel Dojo della Conoscenza',\r\n              progresso: `${Math.round(stato.progresso)}%`\r\n            });\r\n            break;\r\n          case 'maestro':\r\n            suggerimenti.push({\r\n              sigillo: 'Sigillo del Maestro',\r\n              messaggio: 'Raggiungi almeno la cintura arancione',\r\n              progresso: `${Math.round(stato.progresso)}%`\r\n            });\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    \r\n    return suggerimenti;\r\n  };\r\n  \r\n  /**\r\n   * Concede l'accesso alla sezione letteratura per uno studente specifico\r\n   * @param {string} studenteId - L'ID dello studente\r\n   * @returns {Promise<boolean>} - true se l'operazione è riuscita\r\n   */\r\n  export const concediAccessoLetteratura = async (studenteId) => {\r\n    if (!studenteId) return false;\r\n    \r\n    try {\r\n      // In un'implementazione reale, faresti una chiamata API\r\n      // per ottenere il profilo dello studente e poi aggiornarlo\r\n      \r\n      // Esempio con API (da implementare)\r\n      // const studenteProfile = await api.getUserProfile(studenteId);\r\n      // const profiloAggiornato = {\r\n      //   ...studenteProfile,\r\n      //   accessoLetteraturaCompletato: true,\r\n      //   dataAccessoLetteratura: new Date().toISOString()\r\n      // };\r\n      // await api.updateUserProfile(profiloAggiornato);\r\n      \r\n      // Esempio con localStorage (per test)\r\n      const profiles = JSON.parse(localStorage.getItem('userProfiles') || '{}');\r\n      if (profiles[studenteId]) {\r\n        profiles[studenteId].accessoLetteraturaCompletato = true;\r\n        profiles[studenteId].dataAccessoLetteratura = new Date().toISOString();\r\n        localStorage.setItem('userProfiles', JSON.stringify(profiles));\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Errore nella concessione dell\\'accesso:', error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  export default {\r\n    calcolaStatoSigilli,\r\n    calcolaProgressoSigillo,\r\n    verificaAccessoLetteratura,\r\n    aggiornaSigilliProfilo,\r\n    completaAccessoLetteratura,\r\n    getSuggerimentiSigilli,\r\n    concediAccessoLetteratura\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}