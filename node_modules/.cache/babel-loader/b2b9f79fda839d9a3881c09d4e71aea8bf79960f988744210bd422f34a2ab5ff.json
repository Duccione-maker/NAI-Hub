{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utente\\\\lingua-kai-platform - restructured\\\\src\\\\components\\\\components\\\\TestIngresso\\\\TestIngresso.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './TestIngressoStyles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TestIngresso = () => {\n  _s();\n  const navigate = useNavigate();\n  const [currentSection, setCurrentSection] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const [isNAI, setIsNAI] = useState(false);\n  const [motherLanguage, setMotherLanguage] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [questionBank, setQuestionBank] = useState({});\n  const [currentQuestions, setCurrentQuestions] = useState([]);\n  const [sectionProgress, setSectionProgress] = useState({\n    demographic: false,\n    reading: false,\n    grammar: false,\n    writing: false,\n    speaking: false\n  });\n\n  // Configurazione sezioni test QCER\n  const testSections = [{\n    id: 'demographic',\n    name: 'Informazioni di Base',\n    questions: 2\n  }, {\n    id: 'reading',\n    name: 'Comprensione Scritta',\n    questions: 8\n  }, {\n    id: 'grammar',\n    name: 'Grammatica e Vocabolario',\n    questions: 8\n  }, {\n    id: 'writing',\n    name: 'Produzione Scritta',\n    questions: 3\n  }, {\n    id: 'speaking',\n    name: 'Produzione Orale',\n    questions: 3\n  }];\n\n  // Mapping QCER → Cinture Karate\n  const qcerToBelt = {\n    'A1': {\n      belt: 'yellow',\n      name: 'Cintura Gialla',\n      color: '#FFD700'\n    },\n    'A2': {\n      belt: 'orange',\n      name: 'Cintura Arancione',\n      color: '#FFA500'\n    },\n    'B1': {\n      belt: 'green',\n      name: 'Cintura Verde',\n      color: '#32CD32'\n    },\n    'B2': {\n      belt: 'blue',\n      name: 'Cintura Blu',\n      color: '#4169E1'\n    },\n    'C1': {\n      belt: 'brown',\n      name: 'Cintura Marrone',\n      color: '#8B4513'\n    },\n    'C2': {\n      belt: 'black',\n      name: 'Cintura Nera',\n      color: '#000000'\n    }\n  };\n\n  // Lingue supportate per studenti NAI\n  const supportedLanguages = [{\n    code: 'al',\n    name: 'Albanese'\n  }, {\n    code: 'ko',\n    name: 'Kosovaro'\n  }, {\n    code: 'hi',\n    name: 'Hindi'\n  }, {\n    code: 'ar',\n    name: 'Arabo'\n  }, {\n    code: 'zh',\n    name: 'Cinese'\n  }, {\n    code: 'ro',\n    name: 'Rumeno'\n  }, {\n    code: 'es',\n    name: 'Spagnolo'\n  }, {\n    code: 'pt',\n    name: 'Portoghese'\n  }, {\n    code: 'uk',\n    name: 'Ucraino'\n  }];\n\n  // Caricamento dinamico domande AI\n  useEffect(() => {\n    loadQuestionBank();\n  }, []);\n  const loadQuestionBank = async () => {\n    setLoading(true);\n    try {\n      // Usa Mock Service per ora (poi sostituiremo con AI reale)\n      const {\n        MockQuestionService\n      } = await import('./MockQuestionService');\n      const questions = await MockQuestionService.generateTestBank();\n      setQuestionBank(questions);\n\n      // Carica prime domande demografiche\n      setCurrentQuestions(questions.demographic || []);\n    } catch (error) {\n      console.error('Errore caricamento domande:', error);\n      // Fallback a domande hardcoded\n      loadHardcodedQuestions();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadHardcodedQuestions = () => {\n    // Fallback temporaneo con domande esistenti\n    const hardcodedBank = {\n      demographic: [{\n        id: 'years_italy',\n        type: 'multiple_choice',\n        question: 'Da quanti anni sei in Italia?',\n        options: [{\n          value: 'less1',\n          text: 'Meno di 1 anno'\n        }, {\n          value: '1to2',\n          text: '1-2 anni'\n        }, {\n          value: 'more2',\n          text: 'Più di 2 anni'\n        }, {\n          value: 'born',\n          text: 'Sono nato/a in Italia'\n        }]\n      }],\n      reading: [],\n      // Verranno generate dall'AI\n      grammar: [],\n      // Verranno generate dall'AI\n      writing: [],\n      // Verranno generate dall'AI\n      speaking: [] // Verranno generate dall'AI\n    };\n    setQuestionBank(hardcodedBank);\n    setCurrentQuestions(hardcodedBank.demographic);\n  };\n\n  // Gestione avanzamento sezioni\n  const handleAnswer = (questionId, answer) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: answer\n    }));\n\n    // Aggiorna NAI status immediatamente quando rispondi alla domanda anni\n    if (questionId === 'years_italy') {\n      const isNAIUser = answer === 'less1' || answer === '1to2';\n      setIsNAI(isNAIUser);\n      console.log('NAI Status aggiornato:', isNAIUser, 'Years:', answer);\n    }\n  };\n  const nextSection = async () => {\n    const currentSectionId = testSections[currentSection].id;\n\n    // Determina se è NAI dalla prima sezione\n    if (currentSection === 0) {\n      const yearsInItaly = answers.years_italy;\n      const isNAIUser = yearsInItaly === 'less1' || yearsInItaly === '1to2';\n      setIsNAI(isNAIUser);\n      console.log('NAI Status:', isNAIUser, 'Years:', yearsInItaly); // Debug\n    }\n\n    // Marca sezione completata\n    setSectionProgress(prev => ({\n      ...prev,\n      [currentSectionId]: true\n    }));\n\n    // Avanza alla sezione successiva\n    if (currentSection < testSections.length - 1) {\n      const nextSectionIndex = currentSection + 1;\n      const nextSectionId = testSections[nextSectionIndex].id;\n      setCurrentSection(nextSectionIndex);\n\n      // Carica domande per la prossima sezione\n      await loadSectionQuestions(nextSectionId);\n    } else {\n      // Test completato\n      await submitTest();\n    }\n  };\n  const loadSectionQuestions = async sectionId => {\n    setLoading(true);\n    try {\n      // Usa Mock Service per generare domande adattive\n      const {\n        MockQuestionService\n      } = await import('./MockQuestionService');\n      const sectionQuestions = await MockQuestionService.generateSectionQuestions(sectionId, {\n        isNAI: isNAI,\n        motherLanguage: motherLanguage,\n        previousAnswers: answers\n      });\n      setCurrentQuestions(sectionQuestions);\n    } catch (error) {\n      console.error('Errore generazione domande sezione:', error);\n      // Fallback a domande base\n      setCurrentQuestions(questionBank[sectionId] || []);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Algoritmo di scoring QCER avanzato\n  const calculateQCERLevel = async () => {\n    try {\n      // Valuta risposte di scrittura e parlato con Mock AI\n      const {\n        MockQuestionService,\n        QCERScoring\n      } = await import('./MockQuestionService');\n\n      // Valuta scrittura\n      for (let key of Object.keys(answers)) {\n        if (key.includes('writing') && typeof answers[key] === 'string') {\n          const evaluation = await MockQuestionService.evaluateWriting(answers[key], 'B1');\n          answers[key] = {\n            score: evaluation.score,\n            text: answers[key]\n          };\n        }\n\n        // Valuta parlato\n        if (key.includes('speaking') && typeof answers[key] === 'object' && answers[key].audioBlob) {\n          const evaluation = await MockQuestionService.evaluateSpeaking(answers[key], 'B1');\n          answers[key] = {\n            ...answers[key],\n            score: evaluation.score\n          };\n        }\n      }\n\n      // Calcola livello QCER finale\n      return QCERScoring.calculateLevel(answers);\n    } catch (error) {\n      console.error('Errore calcolo QCER:', error);\n\n      // Fallback algoritmo semplificato\n      const scores = {\n        reading: 0,\n        grammar: 0,\n        writing: 0,\n        speaking: 0\n      };\n\n      // Calcola punteggi per sezione (0-100)\n      Object.keys(scores).forEach(section => {\n        const sectionAnswers = Object.keys(answers).filter(key => key.includes(section)).map(key => answers[key]);\n        if (sectionAnswers.length > 0) {\n          const correctAnswers = sectionAnswers.filter(answer => typeof answer === 'object' && answer.isCorrect || answer === 'correct' || typeof answer === 'object' && answer.score > 0.7).length;\n          scores[section] = correctAnswers / sectionAnswers.length * 100;\n        }\n      });\n\n      // Media ponderata (lettura e grammatica più importanti)\n      const totalScore = scores.reading * 0.3 + scores.grammar * 0.3 + scores.writing * 0.2 + scores.speaking * 0.2;\n\n      // Mapping score → livello QCER\n      if (totalScore >= 90) return 'C2';\n      if (totalScore >= 80) return 'C1';\n      if (totalScore >= 65) return 'B2';\n      if (totalScore >= 50) return 'B1';\n      if (totalScore >= 30) return 'A2';\n      return 'A1';\n    }\n  };\n\n  // Invio test e assegnazione cintura\n  const submitTest = async () => {\n    setLoading(true);\n    try {\n      const qcerLevel = await calculateQCERLevel();\n      const assignedBelt = qcerToBelt[qcerLevel];\n\n      // Salva risultati nel database\n      console.log('Risultati test:', {\n        answers,\n        qcerLevel,\n        belt: assignedBelt.belt,\n        isNAI,\n        motherLanguage,\n        timestamp: new Date().toISOString()\n      });\n\n      // Aggiorna profilo utente\n      await updateUserProfile(qcerLevel, assignedBelt);\n\n      // Reindirizza con celebrazione cintura\n      navigate('/dashboard', {\n        state: {\n          newBelt: assignedBelt,\n          qcerLevel,\n          isFirstTest: true\n        }\n      });\n    } catch (error) {\n      console.error('Errore salvataggio test:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateUserProfile = async (qcerLevel, belt) => {\n    try {\n      console.log('Aggiornamento profilo:', {\n        qcerLevel,\n        currentBelt: belt.belt,\n        testCompletedAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Errore aggiornamento profilo:', error);\n    }\n  };\n\n  // Funzione per verificare se si può procedere\n  const canProceed = () => {\n    var _testSections$current;\n    const currentSectionId = (_testSections$current = testSections[currentSection]) === null || _testSections$current === void 0 ? void 0 : _testSections$current.id;\n    if (currentSection === 0) {\n      // Sezione demografica\n      const hasYearsAnswer = answers.years_italy;\n      const hasLanguageIfNAI = !isNAI || motherLanguage;\n      return hasYearsAnswer && hasLanguageIfNAI;\n    }\n\n    // Per altre sezioni, verifica che ci siano risposte\n    const sectionAnswers = Object.keys(answers).filter(key => key.includes(currentSectionId) || key.startsWith(currentSectionId));\n    const requiredAnswers = currentQuestions.length;\n    return sectionAnswers.length >= Math.max(1, requiredAnswers * 0.5); // Almeno 50% delle domande\n  };\n\n  // Rendering sezione demografica\n  const renderDemographicSection = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Informazioni di Base\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demographic-questions\",\n      children: [currentQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"question-text\",\n          children: question.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-grid\",\n          children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: answers[question.id] === option.value ? 'selected' : '',\n            onClick: () => handleAnswer(question.id, option.value),\n            children: option.text\n          }, option.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this)]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: 'yellow',\n          padding: '10px',\n          margin: '10px',\n          fontSize: '14px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"DEBUG:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), \" isNAI = \", isNAI.toString(), \", motherLanguage = \", motherLanguage, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), \"answers.years_italy = \", answers.years_italy]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), isNAI && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"language-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Qual \\xE8 la tua lingua madre?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"language-note\",\n          children: \"Questa informazione ci aiuta a personalizzare il test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"language-grid\",\n          children: supportedLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: motherLanguage === lang.code ? 'selected' : '',\n            onClick: () => {\n              setMotherLanguage(lang.code);\n              console.log('Lingua selezionata:', lang.name);\n            },\n            children: lang.name\n          }, lang.code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n\n  // Rendering sezioni competenze QCER\n  const renderSkillSection = () => {\n    const section = testSections[currentSection];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: section.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-progress\",\n        children: [\"Sezione \", currentSection + 1, \" di \", testSections.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-container\",\n        children: currentQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-block\",\n          children: [question.type === 'reading_comprehension' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reading-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"reading-text\",\n              children: question.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"comprehension-questions\",\n              children: question.subQuestions.map(subQ => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sub-question\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: subQ.question\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 382,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"options-grid\",\n                  children: subQ.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: answers[subQ.id] === option.value ? 'selected' : '',\n                    onClick: () => handleAnswer(subQ.id, option.value),\n                    children: option.text\n                  }, option.value, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 385,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 383,\n                  columnNumber: 25\n                }, this)]\n              }, subQ.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 17\n          }, this), question.type === 'grammar' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grammar-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"options-grid\",\n              children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: answers[question.id] === option.value ? 'selected' : '',\n                onClick: () => handleAnswer(question.id, option.value),\n                children: option.text\n              }, option.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 17\n          }, this), question.type === 'writing' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"writing-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.prompt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              placeholder: question.placeholder,\n              value: answers[question.id] || '',\n              onChange: e => handleAnswer(question.id, e.target.value),\n              rows: question.minRows || 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"word-count\",\n              children: [\"Parole: \", (answers[question.id] || '').split(' ').filter(w => w).length, question.minWords && ` (minimo: ${question.minWords})`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 17\n          }, this), question.type === 'speaking' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"speaking-question\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: question.prompt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(SpeakingRecorder, {\n              questionId: question.id,\n              onRecordingComplete: audioData => handleAnswer(question.id, audioData),\n              maxDuration: question.maxDuration || 60\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 17\n          }, this)]\n        }, question.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Progress tracker migliorato\n  const renderProgressTracker = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-tracker-qcer\",\n    children: testSections.map((section, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `progress-step ${index < currentSection ? 'completed' : index === currentSection ? 'active' : 'pending'}`,\n        children: index < currentSection ? '✓' : index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"section-name\",\n        children: section.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 11\n      }, this), index < testSections.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-line\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 47\n      }, this)]\n    }, section.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 452,\n    columnNumber: 5\n  }, this);\n\n  // Loading con messaggi dinamici\n  const renderLoading = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-spinner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 471,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: currentSection === 0 ? 'Caricamento test...' : currentSection < testSections.length ? 'Generazione domande adattive...' : 'Analisi risultati e assegnazione cintura...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this), currentSection === testSections.length && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"belt-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Preparazione della tua cintura karate...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"belt-animation\",\n        children: \"\\uD83E\\uDD4B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-ingresso-container qcer-enhanced\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"test-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test di Livello QCER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"test-description\",\n        children: \"Questo test determiner\\xE0 il tuo livello secondo il Quadro Comune Europeo e ti assegner\\xE0 la cintura karate corrispondente per iniziare il tuo percorso.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }, this), renderProgressTracker(), loading ? renderLoading() : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-content\",\n      children: [currentSection === 0 ? renderDemographicSection() : renderSkillSection(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-navigation\",\n        children: [currentSection > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-button\",\n          onClick: () => setCurrentSection(currentSection - 1),\n          children: \"Indietro\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-button\",\n          onClick: nextSection,\n          disabled: !canProceed(),\n          children: currentSection === testSections.length - 1 ? 'Completa Test' : 'Continua'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 487,\n    columnNumber: 5\n  }, this);\n};\n\n// Componente per registrazione vocale\n_s(TestIngresso, \"gSytEff1wqH/WBg+kxPn5lMp2XM=\", false, function () {\n  return [useNavigate];\n});\n_c = TestIngresso;\nconst SpeakingRecorder = ({\n  questionId,\n  onRecordingComplete,\n  maxDuration\n}) => {\n  _s2();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioURL, setAudioURL] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const startRecording = async () => {\n    try {\n      // Controlla se il browser supporta getUserMedia\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n        throw new Error('Il tuo browser non supporta la registrazione audio');\n      }\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const recorder = new MediaRecorder(stream);\n      const chunks = [];\n      recorder.ondataavailable = event => chunks.push(event.data);\n      recorder.onstop = () => {\n        const audioBlob = new Blob(chunks, {\n          type: 'audio/wav'\n        });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        setAudioURL(audioUrl);\n        onRecordingComplete({\n          audioBlob,\n          audioUrl,\n          duration: Date.now() - startTime\n        });\n\n        // Stoppa lo stream per liberare il microfono\n        stream.getTracks().forEach(track => track.stop());\n      };\n      const startTime = Date.now();\n      recorder.start();\n      setMediaRecorder(recorder);\n      setIsRecording(true);\n      setHasError(false);\n\n      // Auto-stop dopo maxDuration\n      setTimeout(() => {\n        if (recorder.state === 'recording') {\n          stopRecording();\n        }\n      }, maxDuration * 1000);\n    } catch (error) {\n      console.error('Errore accesso microfono:', error);\n      setHasError(true);\n      if (error.name === 'NotAllowedError') {\n        setErrorMessage('Accesso al microfono negato. Abilita il microfono nelle impostazioni del browser.');\n      } else if (error.name === 'NotFoundError') {\n        setErrorMessage('Nessun microfono trovato. Collega un microfono e riprova.');\n      } else {\n        setErrorMessage('Errore microfono: ' + error.message);\n      }\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }\n  };\n  const skipSpeaking = () => {\n    // Fornisce un punteggio neutro per chi salta la sezione parlato\n    onRecordingComplete({\n      audioBlob: null,\n      audioUrl: null,\n      duration: 0,\n      score: 0.5,\n      skipped: true\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"speaking-recorder\",\n    children: hasError ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recording-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: [\"\\u26A0\\uFE0F \", errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"retry-button\",\n          onClick: () => {\n            setHasError(false);\n            setErrorMessage('');\n          },\n          children: \"\\uD83D\\uDD04 Riprova\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"skip-button\",\n          onClick: skipSpeaking,\n          children: \"\\u23ED\\uFE0F Salta Sezione Parlato\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"skip-note\",\n        children: \"Nota: Saltando la sezione parlato, il test sar\\xE0 meno preciso ma potrai comunque ottenere una valutazione.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recording-controls\",\n        children: !isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"record-button\",\n          onClick: startRecording,\n          disabled: !!audioURL,\n          children: \"\\uD83C\\uDFA4 Inizia Registrazione\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"stop-button recording\",\n          onClick: stopRecording,\n          children: \"\\u23F9\\uFE0F Stop Registrazione\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 11\n      }, this), audioURL && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"audio-playback\",\n        children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: audioURL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"re-record-button\",\n          onClick: () => {\n            setAudioURL(null);\n            setIsRecording(false);\n          },\n          children: \"\\uD83D\\uDD04 Registra di Nuovo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 13\n      }, this), !audioURL && !isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speaking-help\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uD83D\\uDCA1 Assicurati di avere un microfono collegato e funzionante\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"skip-speaking-button\",\n          onClick: skipSpeaking,\n          children: \"\\u23ED\\uFE0F Salta questa sezione\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 606,\n    columnNumber: 5\n  }, this);\n};\n_s2(SpeakingRecorder, \"Xq0V+qUITQ3kmMy51NCo1jMi8go=\");\n_c2 = SpeakingRecorder;\nexport default TestIngresso;\nvar _c, _c2;\n$RefreshReg$(_c, \"TestIngresso\");\n$RefreshReg$(_c2, \"SpeakingRecorder\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","TestIngresso","_s","navigate","currentSection","setCurrentSection","answers","setAnswers","isNAI","setIsNAI","motherLanguage","setMotherLanguage","loading","setLoading","questionBank","setQuestionBank","currentQuestions","setCurrentQuestions","sectionProgress","setSectionProgress","demographic","reading","grammar","writing","speaking","testSections","id","name","questions","qcerToBelt","belt","color","supportedLanguages","code","loadQuestionBank","MockQuestionService","generateTestBank","error","console","loadHardcodedQuestions","hardcodedBank","type","question","options","value","text","handleAnswer","questionId","answer","prev","isNAIUser","log","nextSection","currentSectionId","yearsInItaly","years_italy","length","nextSectionIndex","nextSectionId","loadSectionQuestions","submitTest","sectionId","sectionQuestions","generateSectionQuestions","previousAnswers","calculateQCERLevel","QCERScoring","key","Object","keys","includes","evaluation","evaluateWriting","score","audioBlob","evaluateSpeaking","calculateLevel","scores","forEach","section","sectionAnswers","filter","map","correctAnswers","isCorrect","totalScore","qcerLevel","assignedBelt","timestamp","Date","toISOString","updateUserProfile","state","newBelt","isFirstTest","currentBelt","testCompletedAt","canProceed","_testSections$current","hasYearsAnswer","hasLanguageIfNAI","startsWith","requiredAnswers","Math","max","renderDemographicSection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","option","onClick","style","background","padding","margin","fontSize","toString","lang","renderSkillSection","subQuestions","subQ","prompt","placeholder","onChange","e","target","rows","minRows","split","w","minWords","SpeakingRecorder","onRecordingComplete","audioData","maxDuration","renderProgressTracker","renderLoading","disabled","_c","_s2","isRecording","setIsRecording","audioURL","setAudioURL","mediaRecorder","setMediaRecorder","hasError","setHasError","errorMessage","setErrorMessage","startRecording","navigator","mediaDevices","getUserMedia","Error","stream","audio","recorder","MediaRecorder","chunks","ondataavailable","event","push","data","onstop","Blob","audioUrl","URL","createObjectURL","duration","now","startTime","getTracks","track","stop","start","setTimeout","stopRecording","message","skipSpeaking","skipped","controls","src","_c2","$RefreshReg$"],"sources":["C:/Users/Utente/lingua-kai-platform - restructured/src/components/components/TestIngresso/TestIngresso.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './TestIngressoStyles.css';\r\n\r\nconst TestIngresso = () => {\r\n  const navigate = useNavigate();\r\n  const [currentSection, setCurrentSection] = useState(0);\r\n  const [answers, setAnswers] = useState({});\r\n  const [isNAI, setIsNAI] = useState(false);\r\n  const [motherLanguage, setMotherLanguage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [questionBank, setQuestionBank] = useState({});\r\n  const [currentQuestions, setCurrentQuestions] = useState([]);\r\n  const [sectionProgress, setSectionProgress] = useState({\r\n    demographic: false,\r\n    reading: false,\r\n    grammar: false,\r\n    writing: false,\r\n    speaking: false\r\n  });\r\n\r\n  // Configurazione sezioni test QCER\r\n  const testSections = [\r\n    { id: 'demographic', name: 'Informazioni di Base', questions: 2 },\r\n    { id: 'reading', name: 'Comprensione Scritta', questions: 8 },\r\n    { id: 'grammar', name: 'Grammatica e Vocabolario', questions: 8 },\r\n    { id: 'writing', name: 'Produzione Scritta', questions: 3 },\r\n    { id: 'speaking', name: 'Produzione Orale', questions: 3 }\r\n  ];\r\n\r\n  // Mapping QCER → Cinture Karate\r\n  const qcerToBelt = {\r\n    'A1': { belt: 'yellow', name: 'Cintura Gialla', color: '#FFD700' },\r\n    'A2': { belt: 'orange', name: 'Cintura Arancione', color: '#FFA500' },\r\n    'B1': { belt: 'green', name: 'Cintura Verde', color: '#32CD32' },\r\n    'B2': { belt: 'blue', name: 'Cintura Blu', color: '#4169E1' },\r\n    'C1': { belt: 'brown', name: 'Cintura Marrone', color: '#8B4513' },\r\n    'C2': { belt: 'black', name: 'Cintura Nera', color: '#000000' }\r\n  };\r\n\r\n  // Lingue supportate per studenti NAI\r\n  const supportedLanguages = [\r\n    { code: 'al', name: 'Albanese' },\r\n    { code: 'ko', name: 'Kosovaro' },\r\n    { code: 'hi', name: 'Hindi' },\r\n    { code: 'ar', name: 'Arabo' },\r\n    { code: 'zh', name: 'Cinese' },\r\n    { code: 'ro', name: 'Rumeno' },\r\n    { code: 'es', name: 'Spagnolo' },\r\n    { code: 'pt', name: 'Portoghese' },\r\n    { code: 'uk', name: 'Ucraino' }\r\n  ];\r\n\r\n  // Caricamento dinamico domande AI\r\n  useEffect(() => {\r\n    loadQuestionBank();\r\n  }, []);\r\n\r\n  const loadQuestionBank = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Usa Mock Service per ora (poi sostituiremo con AI reale)\r\n      const { MockQuestionService } = await import('./MockQuestionService');\r\n      const questions = await MockQuestionService.generateTestBank();\r\n      setQuestionBank(questions);\r\n      \r\n      // Carica prime domande demografiche\r\n      setCurrentQuestions(questions.demographic || []);\r\n    } catch (error) {\r\n      console.error('Errore caricamento domande:', error);\r\n      // Fallback a domande hardcoded\r\n      loadHardcodedQuestions();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadHardcodedQuestions = () => {\r\n    // Fallback temporaneo con domande esistenti\r\n    const hardcodedBank = {\r\n      demographic: [\r\n        {\r\n          id: 'years_italy',\r\n          type: 'multiple_choice',\r\n          question: 'Da quanti anni sei in Italia?',\r\n          options: [\r\n            { value: 'less1', text: 'Meno di 1 anno' },\r\n            { value: '1to2', text: '1-2 anni' },\r\n            { value: 'more2', text: 'Più di 2 anni' },\r\n            { value: 'born', text: 'Sono nato/a in Italia' }\r\n          ]\r\n        }\r\n      ],\r\n      reading: [], // Verranno generate dall'AI\r\n      grammar: [], // Verranno generate dall'AI\r\n      writing: [], // Verranno generate dall'AI\r\n      speaking: [] // Verranno generate dall'AI\r\n    };\r\n    setQuestionBank(hardcodedBank);\r\n    setCurrentQuestions(hardcodedBank.demographic);\r\n  };\r\n\r\n  // Gestione avanzamento sezioni\r\n  const handleAnswer = (questionId, answer) => {\r\n    setAnswers(prev => ({\r\n      ...prev,\r\n      [questionId]: answer\r\n    }));\r\n    \r\n    // Aggiorna NAI status immediatamente quando rispondi alla domanda anni\r\n    if (questionId === 'years_italy') {\r\n      const isNAIUser = answer === 'less1' || answer === '1to2';\r\n      setIsNAI(isNAIUser);\r\n      console.log('NAI Status aggiornato:', isNAIUser, 'Years:', answer);\r\n    }\r\n  };\r\n\r\n  const nextSection = async () => {\r\n    const currentSectionId = testSections[currentSection].id;\r\n    \r\n    // Determina se è NAI dalla prima sezione\r\n    if (currentSection === 0) {\r\n      const yearsInItaly = answers.years_italy;\r\n      const isNAIUser = yearsInItaly === 'less1' || yearsInItaly === '1to2';\r\n      setIsNAI(isNAIUser);\r\n      console.log('NAI Status:', isNAIUser, 'Years:', yearsInItaly); // Debug\r\n    }\r\n\r\n    // Marca sezione completata\r\n    setSectionProgress(prev => ({\r\n      ...prev,\r\n      [currentSectionId]: true\r\n    }));\r\n\r\n    // Avanza alla sezione successiva\r\n    if (currentSection < testSections.length - 1) {\r\n      const nextSectionIndex = currentSection + 1;\r\n      const nextSectionId = testSections[nextSectionIndex].id;\r\n      \r\n      setCurrentSection(nextSectionIndex);\r\n      \r\n      // Carica domande per la prossima sezione\r\n      await loadSectionQuestions(nextSectionId);\r\n    } else {\r\n      // Test completato\r\n      await submitTest();\r\n    }\r\n  };\r\n\r\n  const loadSectionQuestions = async (sectionId) => {\r\n    setLoading(true);\r\n    try {\r\n      // Usa Mock Service per generare domande adattive\r\n      const { MockQuestionService } = await import('./MockQuestionService');\r\n      const sectionQuestions = await MockQuestionService.generateSectionQuestions(sectionId, {\r\n        isNAI: isNAI,\r\n        motherLanguage: motherLanguage,\r\n        previousAnswers: answers\r\n      });\r\n      \r\n      setCurrentQuestions(sectionQuestions);\r\n    } catch (error) {\r\n      console.error('Errore generazione domande sezione:', error);\r\n      // Fallback a domande base\r\n      setCurrentQuestions(questionBank[sectionId] || []);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Algoritmo di scoring QCER avanzato\r\n  const calculateQCERLevel = async () => {\r\n    try {\r\n      // Valuta risposte di scrittura e parlato con Mock AI\r\n      const { MockQuestionService, QCERScoring } = await import('./MockQuestionService');\r\n      \r\n      // Valuta scrittura\r\n      for (let key of Object.keys(answers)) {\r\n        if (key.includes('writing') && typeof answers[key] === 'string') {\r\n          const evaluation = await MockQuestionService.evaluateWriting(answers[key], 'B1');\r\n          answers[key] = { score: evaluation.score, text: answers[key] };\r\n        }\r\n        \r\n        // Valuta parlato\r\n        if (key.includes('speaking') && typeof answers[key] === 'object' && answers[key].audioBlob) {\r\n          const evaluation = await MockQuestionService.evaluateSpeaking(answers[key], 'B1');\r\n          answers[key] = { ...answers[key], score: evaluation.score };\r\n        }\r\n      }\r\n\r\n      // Calcola livello QCER finale\r\n      return QCERScoring.calculateLevel(answers);\r\n    } catch (error) {\r\n      console.error('Errore calcolo QCER:', error);\r\n      \r\n      // Fallback algoritmo semplificato\r\n      const scores = {\r\n        reading: 0,\r\n        grammar: 0,\r\n        writing: 0,\r\n        speaking: 0\r\n      };\r\n\r\n      // Calcola punteggi per sezione (0-100)\r\n      Object.keys(scores).forEach(section => {\r\n        const sectionAnswers = Object.keys(answers)\r\n          .filter(key => key.includes(section))\r\n          .map(key => answers[key]);\r\n        \r\n        if (sectionAnswers.length > 0) {\r\n          const correctAnswers = sectionAnswers.filter(answer => \r\n            (typeof answer === 'object' && answer.isCorrect) ||\r\n            answer === 'correct' ||\r\n            (typeof answer === 'object' && answer.score > 0.7)\r\n          ).length;\r\n          scores[section] = (correctAnswers / sectionAnswers.length) * 100;\r\n        }\r\n      });\r\n\r\n      // Media ponderata (lettura e grammatica più importanti)\r\n      const totalScore = (\r\n        scores.reading * 0.3 +\r\n        scores.grammar * 0.3 +\r\n        scores.writing * 0.2 +\r\n        scores.speaking * 0.2\r\n      );\r\n\r\n      // Mapping score → livello QCER\r\n      if (totalScore >= 90) return 'C2';\r\n      if (totalScore >= 80) return 'C1';\r\n      if (totalScore >= 65) return 'B2';\r\n      if (totalScore >= 50) return 'B1';\r\n      if (totalScore >= 30) return 'A2';\r\n      return 'A1';\r\n    }\r\n  };\r\n\r\n  // Invio test e assegnazione cintura\r\n  const submitTest = async () => {\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const qcerLevel = await calculateQCERLevel();\r\n      const assignedBelt = qcerToBelt[qcerLevel];\r\n      \r\n      // Salva risultati nel database\r\n      console.log('Risultati test:', {\r\n        answers,\r\n        qcerLevel,\r\n        belt: assignedBelt.belt,\r\n        isNAI,\r\n        motherLanguage,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n      // Aggiorna profilo utente\r\n      await updateUserProfile(qcerLevel, assignedBelt);\r\n      \r\n      // Reindirizza con celebrazione cintura\r\n      navigate('/dashboard', { \r\n        state: { \r\n          newBelt: assignedBelt,\r\n          qcerLevel,\r\n          isFirstTest: true \r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Errore salvataggio test:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateUserProfile = async (qcerLevel, belt) => {\r\n    try {\r\n      console.log('Aggiornamento profilo:', {\r\n        qcerLevel,\r\n        currentBelt: belt.belt,\r\n        testCompletedAt: new Date().toISOString()\r\n      });\r\n    } catch (error) {\r\n      console.error('Errore aggiornamento profilo:', error);\r\n    }\r\n  };\r\n\r\n  // Funzione per verificare se si può procedere\r\n  const canProceed = () => {\r\n    const currentSectionId = testSections[currentSection]?.id;\r\n    \r\n    if (currentSection === 0) {\r\n      // Sezione demografica\r\n      const hasYearsAnswer = answers.years_italy;\r\n      const hasLanguageIfNAI = !isNAI || motherLanguage;\r\n      return hasYearsAnswer && hasLanguageIfNAI;\r\n    }\r\n    \r\n    // Per altre sezioni, verifica che ci siano risposte\r\n    const sectionAnswers = Object.keys(answers).filter(key => \r\n      key.includes(currentSectionId) || \r\n      key.startsWith(currentSectionId)\r\n    );\r\n    \r\n    const requiredAnswers = currentQuestions.length;\r\n    return sectionAnswers.length >= Math.max(1, requiredAnswers * 0.5); // Almeno 50% delle domande\r\n  };\r\n\r\n  // Rendering sezione demografica\r\n  const renderDemographicSection = () => (\r\n    <div className=\"test-section\">\r\n      <h3>Informazioni di Base</h3>\r\n      <div className=\"demographic-questions\">\r\n        {currentQuestions.map((question, index) => (\r\n          <div key={question.id} className=\"question-container\">\r\n            <p className=\"question-text\">{question.question}</p>\r\n            <div className=\"options-grid\">\r\n              {question.options.map(option => (\r\n                <button\r\n                  key={option.value}\r\n                  className={answers[question.id] === option.value ? 'selected' : ''}\r\n                  onClick={() => handleAnswer(question.id, option.value)}\r\n                >\r\n                  {option.text}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        \r\n        {/* DEBUG TEMPORANEO */}\r\n        <div style={{background: 'yellow', padding: '10px', margin: '10px', fontSize: '14px'}}>\r\n          <strong>DEBUG:</strong> isNAI = {isNAI.toString()}, motherLanguage = {motherLanguage}\r\n          <br/>\r\n          answers.years_italy = {answers.years_italy}\r\n        </div>\r\n        \r\n        {/* Selezione lingua madre per NAI */}\r\n        {isNAI && (\r\n          <div className=\"language-selection\">\r\n            <h4>Qual è la tua lingua madre?</h4>\r\n            <p className=\"language-note\">Questa informazione ci aiuta a personalizzare il test</p>\r\n            <div className=\"language-grid\">\r\n              {supportedLanguages.map(lang => (\r\n                <button\r\n                  key={lang.code}\r\n                  className={motherLanguage === lang.code ? 'selected' : ''}\r\n                  onClick={() => {\r\n                    setMotherLanguage(lang.code);\r\n                    console.log('Lingua selezionata:', lang.name);\r\n                  }}\r\n                >\r\n                  {lang.name}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Rendering sezioni competenze QCER\r\n  const renderSkillSection = () => {\r\n    const section = testSections[currentSection];\r\n    \r\n    return (\r\n      <div className=\"test-section\">\r\n        <h3>{section.name}</h3>\r\n        <div className=\"section-progress\">\r\n          Sezione {currentSection + 1} di {testSections.length}\r\n        </div>\r\n        \r\n        <div className=\"questions-container\">\r\n          {currentQuestions.map((question, index) => (\r\n            <div key={question.id} className=\"question-block\">\r\n              {/* Rendering basato sul tipo di domanda */}\r\n              {question.type === 'reading_comprehension' && (\r\n                <div className=\"reading-question\">\r\n                  <div className=\"reading-text\">{question.text}</div>\r\n                  <div className=\"comprehension-questions\">\r\n                    {question.subQuestions.map(subQ => (\r\n                      <div key={subQ.id} className=\"sub-question\">\r\n                        <p>{subQ.question}</p>\r\n                        <div className=\"options-grid\">\r\n                          {subQ.options.map(option => (\r\n                            <button\r\n                              key={option.value}\r\n                              className={answers[subQ.id] === option.value ? 'selected' : ''}\r\n                              onClick={() => handleAnswer(subQ.id, option.value)}\r\n                            >\r\n                              {option.text}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {question.type === 'grammar' && (\r\n                <div className=\"grammar-question\">\r\n                  <p>{question.question}</p>\r\n                  <div className=\"options-grid\">\r\n                    {question.options.map(option => (\r\n                      <button\r\n                        key={option.value}\r\n                        className={answers[question.id] === option.value ? 'selected' : ''}\r\n                        onClick={() => handleAnswer(question.id, option.value)}\r\n                      >\r\n                        {option.text}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {question.type === 'writing' && (\r\n                <div className=\"writing-question\">\r\n                  <p>{question.prompt}</p>\r\n                  <textarea\r\n                    placeholder={question.placeholder}\r\n                    value={answers[question.id] || ''}\r\n                    onChange={(e) => handleAnswer(question.id, e.target.value)}\r\n                    rows={question.minRows || 4}\r\n                  />\r\n                  <div className=\"word-count\">\r\n                    Parole: {(answers[question.id] || '').split(' ').filter(w => w).length}\r\n                    {question.minWords && ` (minimo: ${question.minWords})`}\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {question.type === 'speaking' && (\r\n                <div className=\"speaking-question\">\r\n                  <p>{question.prompt}</p>\r\n                  <SpeakingRecorder \r\n                    questionId={question.id}\r\n                    onRecordingComplete={(audioData) => handleAnswer(question.id, audioData)}\r\n                    maxDuration={question.maxDuration || 60}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Progress tracker migliorato\r\n  const renderProgressTracker = () => (\r\n    <div className=\"progress-tracker-qcer\">\r\n      {testSections.map((section, index) => (\r\n        <div key={section.id} className=\"progress-section\">\r\n          <div className={`progress-step ${\r\n            index < currentSection ? 'completed' : \r\n            index === currentSection ? 'active' : 'pending'\r\n          }`}>\r\n            {index < currentSection ? '✓' : index + 1}\r\n          </div>\r\n          <span className=\"section-name\">{section.name}</span>\r\n          {index < testSections.length - 1 && <div className=\"progress-line\" />}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  // Loading con messaggi dinamici\r\n  const renderLoading = () => (\r\n    <div className=\"loading-container\">\r\n      <div className=\"loading-spinner\" />\r\n      <p>\r\n        {currentSection === 0 ? 'Caricamento test...' :\r\n         currentSection < testSections.length ? 'Generazione domande adattive...' :\r\n         'Analisi risultati e assegnazione cintura...'}\r\n      </p>\r\n      {currentSection === testSections.length && (\r\n        <div className=\"belt-preview\">\r\n          <p>Preparazione della tua cintura karate...</p>\r\n          <div className=\"belt-animation\">🥋</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"test-ingresso-container qcer-enhanced\">\r\n      <header className=\"test-header\">\r\n        <h2>Test di Livello QCER</h2>\r\n        <p className=\"test-description\">\r\n          Questo test determinerà il tuo livello secondo il Quadro Comune Europeo \r\n          e ti assegnerà la cintura karate corrispondente per iniziare il tuo percorso.\r\n        </p>\r\n      </header>\r\n      \r\n      {renderProgressTracker()}\r\n      \r\n      {loading ? renderLoading() : (\r\n        <div className=\"test-content\">\r\n          {currentSection === 0 ? renderDemographicSection() : renderSkillSection()}\r\n          \r\n          <div className=\"section-navigation\">\r\n            {currentSection > 0 && (\r\n              <button \r\n                className=\"back-button\"\r\n                onClick={() => setCurrentSection(currentSection - 1)}\r\n              >\r\n                Indietro\r\n              </button>\r\n            )}\r\n            \r\n            <button\r\n              className=\"next-button\"\r\n              onClick={nextSection}\r\n              disabled={!canProceed()}\r\n            >\r\n              {currentSection === testSections.length - 1 ? 'Completa Test' : 'Continua'}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Componente per registrazione vocale\r\nconst SpeakingRecorder = ({ questionId, onRecordingComplete, maxDuration }) => {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [audioURL, setAudioURL] = useState(null);\r\n  const [mediaRecorder, setMediaRecorder] = useState(null);\r\n  const [hasError, setHasError] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      // Controlla se il browser supporta getUserMedia\r\n      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\r\n        throw new Error('Il tuo browser non supporta la registrazione audio');\r\n      }\r\n\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      const recorder = new MediaRecorder(stream);\r\n      const chunks = [];\r\n\r\n      recorder.ondataavailable = (event) => chunks.push(event.data);\r\n      recorder.onstop = () => {\r\n        const audioBlob = new Blob(chunks, { type: 'audio/wav' });\r\n        const audioUrl = URL.createObjectURL(audioBlob);\r\n        setAudioURL(audioUrl);\r\n        onRecordingComplete({\r\n          audioBlob,\r\n          audioUrl,\r\n          duration: Date.now() - startTime\r\n        });\r\n        \r\n        // Stoppa lo stream per liberare il microfono\r\n        stream.getTracks().forEach(track => track.stop());\r\n      };\r\n\r\n      const startTime = Date.now();\r\n      recorder.start();\r\n      setMediaRecorder(recorder);\r\n      setIsRecording(true);\r\n      setHasError(false);\r\n\r\n      // Auto-stop dopo maxDuration\r\n      setTimeout(() => {\r\n        if (recorder.state === 'recording') {\r\n          stopRecording();\r\n        }\r\n      }, maxDuration * 1000);\r\n\r\n    } catch (error) {\r\n      console.error('Errore accesso microfono:', error);\r\n      setHasError(true);\r\n      \r\n      if (error.name === 'NotAllowedError') {\r\n        setErrorMessage('Accesso al microfono negato. Abilita il microfono nelle impostazioni del browser.');\r\n      } else if (error.name === 'NotFoundError') {\r\n        setErrorMessage('Nessun microfono trovato. Collega un microfono e riprova.');\r\n      } else {\r\n        setErrorMessage('Errore microfono: ' + error.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\r\n      mediaRecorder.stop();\r\n      setIsRecording(false);\r\n    }\r\n  };\r\n\r\n  const skipSpeaking = () => {\r\n    // Fornisce un punteggio neutro per chi salta la sezione parlato\r\n    onRecordingComplete({\r\n      audioBlob: null,\r\n      audioUrl: null,\r\n      duration: 0,\r\n      score: 0.5,\r\n      skipped: true\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"speaking-recorder\">\r\n      {hasError ? (\r\n        <div className=\"recording-error\">\r\n          <p className=\"error-message\">⚠️ {errorMessage}</p>\r\n          <div className=\"error-actions\">\r\n            <button \r\n              className=\"retry-button\"\r\n              onClick={() => {\r\n                setHasError(false);\r\n                setErrorMessage('');\r\n              }}\r\n            >\r\n              🔄 Riprova\r\n            </button>\r\n            <button \r\n              className=\"skip-button\"\r\n              onClick={skipSpeaking}\r\n            >\r\n              ⏭️ Salta Sezione Parlato\r\n            </button>\r\n          </div>\r\n          <p className=\"skip-note\">\r\n            Nota: Saltando la sezione parlato, il test sarà meno preciso ma potrai comunque ottenere una valutazione.\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"recording-controls\">\r\n            {!isRecording ? (\r\n              <button \r\n                className=\"record-button\"\r\n                onClick={startRecording}\r\n                disabled={!!audioURL}\r\n              >\r\n                🎤 Inizia Registrazione\r\n              </button>\r\n            ) : (\r\n              <button \r\n                className=\"stop-button recording\"\r\n                onClick={stopRecording}\r\n              >\r\n                ⏹️ Stop Registrazione\r\n              </button>\r\n            )}\r\n          </div>\r\n          \r\n          {audioURL && (\r\n            <div className=\"audio-playback\">\r\n              <audio controls src={audioURL} />\r\n              <button \r\n                className=\"re-record-button\"\r\n                onClick={() => {\r\n                  setAudioURL(null);\r\n                  setIsRecording(false);\r\n                }}\r\n              >\r\n                🔄 Registra di Nuovo\r\n              </button>\r\n            </div>\r\n          )}\r\n          \r\n          {!audioURL && !isRecording && (\r\n            <div className=\"speaking-help\">\r\n              <p>💡 Assicurati di avere un microfono collegato e funzionante</p>\r\n              <button \r\n                className=\"skip-speaking-button\"\r\n                onClick={skipSpeaking}\r\n              >\r\n                ⏭️ Salta questa sezione\r\n              </button>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestIngresso;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}