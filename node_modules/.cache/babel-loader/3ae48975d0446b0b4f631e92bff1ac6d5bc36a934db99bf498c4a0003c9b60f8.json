{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Utente\\\\lingua-kai-platform - restructured\\\\src\\\\components\\\\components\\\\common\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\n\n// Componente che protegge le rotte in base alle condizioni\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requiresEntryTest = true\n}) => {\n  _s();\n  // Usa il contesto dell'utente direttamente senza useUser per ora\n  const userProfile = {}; // Da collegare al tuo context effettivo\n  const loading = false; // Da collegare al tuo context effettivo\n  const location = useLocation();\n\n  // Se stiamo ancora caricando, mostra un indicatore di caricamento\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"route-loading\",\n      children: \"Verifica accesso...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Commentiamo temporaneamente queste condizioni per evitare problemi\n  /*\r\n  // Se non c'è un profilo utente, reindirizza al login\r\n  if (!userProfile) {\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n  \r\n  // Se la rotta richiede il completamento del test d'ingresso e l'utente non l'ha fatto\r\n  if (requiresEntryTest && !userProfile.hasCompletedEntryTest) {\r\n    return <Navigate to=\"/test-ingresso\" state={{ from: location }} replace />;\r\n  }\r\n  */\n\n  // Per ora, consenti l'accesso incondizionato\n  return children;\n};\n_s(ProtectedRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","jsxDEV","_jsxDEV","ProtectedRoute","children","requiresEntryTest","_s","userProfile","loading","location","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Utente/lingua-kai-platform - restructured/src/components/components/common/ProtectedRoute.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n\r\n// Componente che protegge le rotte in base alle condizioni\r\nconst ProtectedRoute = ({ children, requiresEntryTest = true }) => {\r\n  // Usa il contesto dell'utente direttamente senza useUser per ora\r\n  const userProfile = {}; // Da collegare al tuo context effettivo\r\n  const loading = false; // Da collegare al tuo context effettivo\r\n  const location = useLocation();\r\n  \r\n  // Se stiamo ancora caricando, mostra un indicatore di caricamento\r\n  if (loading) {\r\n    return <div className=\"route-loading\">Verifica accesso...</div>;\r\n  }\r\n  \r\n  // Commentiamo temporaneamente queste condizioni per evitare problemi\r\n  /*\r\n  // Se non c'è un profilo utente, reindirizza al login\r\n  if (!userProfile) {\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n  \r\n  // Se la rotta richiede il completamento del test d'ingresso e l'utente non l'ha fatto\r\n  if (requiresEntryTest && !userProfile.hasCompletedEntryTest) {\r\n    return <Navigate to=\"/test-ingresso\" state={{ from: location }} replace />;\r\n  }\r\n  */\r\n  \r\n  // Per ora, consenti l'accesso incondizionato\r\n  return children;\r\n};\r\n\r\nexport default ProtectedRoute;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;;AAExD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,iBAAiB,GAAG;AAAK,CAAC,KAAK;EAAAC,EAAA;EACjE;EACA,MAAMC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;EACxB,MAAMC,OAAO,GAAG,KAAK,CAAC,CAAC;EACvB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAIQ,OAAO,EAAE;IACX,oBAAON,OAAA;MAAKQ,SAAS,EAAC,eAAe;MAAAN,QAAA,EAAC;IAAmB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACjE;;EAEA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;EACA,OAAOV,QAAQ;AACjB,CAAC;AAACE,EAAA,CA1BIH,cAAc;EAAA,QAIDH,WAAW;AAAA;AAAAe,EAAA,GAJxBZ,cAAc;AA4BpB,eAAeA,cAAc;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}