{"ast":null,"code":"import api from './api';\n\n/**\r\n * Servizio per la gestione dei testi e delle risorse di apprendimento\r\n */\nconst textService = {\n  /**\r\n   * Ottiene la lista dei testi disponibili\r\n   * @param {string} [level] - Filtra per livello (opzionale)\r\n   * @returns {Promise<Array>} Lista di testi\r\n   */\n  getTexts: async level => {\n    const endpoint = level ? `text/list?level=${level}` : 'text/list';\n    return api.get(endpoint);\n  },\n  /**\r\n   * Ottiene un testo specifico per ID\r\n   * @param {number|string} id - ID del testo\r\n   * @returns {Promise<Object>} Dati completi del testo\r\n   */\n  getText: async id => {\n    return api.get(`text/${id}`);\n  },\n  /**\r\n   * Aggiunge un nuovo testo\r\n   * @param {Object} textData - Dati del testo (title, content, level, etc.)\r\n   * @returns {Promise<Object>} Testo creato\r\n   */\n  addText: async textData => {\n    return api.post('text', textData);\n  },\n  /**\r\n   * Ottiene testi suggeriti per il livello dell'utente\r\n   * @param {string} level - Livello dell'utente (A1, A2, B1, etc.)\r\n   * @param {Array} [interests] - Interessi dell'utente (opzionale)\r\n   * @returns {Promise<Array>} Testi suggeriti\r\n   */\n  getSuggestedTexts: async (level, interests = []) => {\n    return api.get(`text/list?level=${level}&suggested=true`);\n  }\n};\nexport default textService;","map":{"version":3,"names":["api","textService","getTexts","level","endpoint","get","getText","id","addText","textData","post","getSuggestedTexts","interests"],"sources":["C:/Users/Utente/lingua-kai-platform - restructured/src/services/textService.js"],"sourcesContent":["import api from './api';\r\n\r\n/**\r\n * Servizio per la gestione dei testi e delle risorse di apprendimento\r\n */\r\nconst textService = {\r\n  /**\r\n   * Ottiene la lista dei testi disponibili\r\n   * @param {string} [level] - Filtra per livello (opzionale)\r\n   * @returns {Promise<Array>} Lista di testi\r\n   */\r\n  getTexts: async (level) => {\r\n    const endpoint = level ? `text/list?level=${level}` : 'text/list';\r\n    return api.get(endpoint);\r\n  },\r\n\r\n  /**\r\n   * Ottiene un testo specifico per ID\r\n   * @param {number|string} id - ID del testo\r\n   * @returns {Promise<Object>} Dati completi del testo\r\n   */\r\n  getText: async (id) => {\r\n    return api.get(`text/${id}`);\r\n  },\r\n\r\n  /**\r\n   * Aggiunge un nuovo testo\r\n   * @param {Object} textData - Dati del testo (title, content, level, etc.)\r\n   * @returns {Promise<Object>} Testo creato\r\n   */\r\n  addText: async (textData) => {\r\n    return api.post('text', textData);\r\n  },\r\n  \r\n  /**\r\n   * Ottiene testi suggeriti per il livello dell'utente\r\n   * @param {string} level - Livello dell'utente (A1, A2, B1, etc.)\r\n   * @param {Array} [interests] - Interessi dell'utente (opzionale)\r\n   * @returns {Promise<Array>} Testi suggeriti\r\n   */\r\n  getSuggestedTexts: async (level, interests = []) => {\r\n    return api.get(`text/list?level=${level}&suggested=true`);\r\n  }\r\n};\r\n\r\nexport default textService;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA;AACA;AACA,MAAMC,WAAW,GAAG;EAClB;AACF;AACA;AACA;AACA;EACEC,QAAQ,EAAE,MAAOC,KAAK,IAAK;IACzB,MAAMC,QAAQ,GAAGD,KAAK,GAAG,mBAAmBA,KAAK,EAAE,GAAG,WAAW;IACjE,OAAOH,GAAG,CAACK,GAAG,CAACD,QAAQ,CAAC;EAC1B,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,OAAO,EAAE,MAAOC,EAAE,IAAK;IACrB,OAAOP,GAAG,CAACK,GAAG,CAAC,QAAQE,EAAE,EAAE,CAAC;EAC9B,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,OAAO,EAAE,MAAOC,QAAQ,IAAK;IAC3B,OAAOT,GAAG,CAACU,IAAI,CAAC,MAAM,EAAED,QAAQ,CAAC;EACnC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEE,iBAAiB,EAAE,MAAAA,CAAOR,KAAK,EAAES,SAAS,GAAG,EAAE,KAAK;IAClD,OAAOZ,GAAG,CAACK,GAAG,CAAC,mBAAmBF,KAAK,iBAAiB,CAAC;EAC3D;AACF,CAAC;AAED,eAAeF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}