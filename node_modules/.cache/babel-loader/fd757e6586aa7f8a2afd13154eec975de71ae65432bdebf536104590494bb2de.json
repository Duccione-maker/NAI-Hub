{"ast":null,"code":"/**\r\n * Servizio di base per le chiamate API\r\n */\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\n\n/**\r\n * Wrapper per fetch con gestione degli errori e headers comuni\r\n * @param {string} endpoint - Endpoint API senza il prefisso /api\r\n * @param {Object} options - Opzioni fetch\r\n * @returns {Promise<any>} - Risposta JSON\r\n */\nexport async function fetchApi(endpoint, options = {}) {\n  // Imposta gli headers di default\n  const headers = {\n    'Content-Type': 'application/json',\n    ...options.headers\n  };\n\n  // Costruisci l'URL completo\n  const url = `${API_URL}/${endpoint}`;\n  try {\n    // Esegui la chiamata fetch\n    const response = await fetch(url, {\n      ...options,\n      headers\n    });\n\n    // Verifica se la risposta è ok (status 200-299)\n    if (!response.ok) {\n      // Prova a ottenere il messaggio di errore dal JSON se disponibile\n      try {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Error ${response.status}: ${response.statusText}`);\n      } catch (jsonError) {\n        // Se non puoi analizzare il JSON, usa un errore generico\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\n      }\n    }\n\n    // Per richieste HEAD o DELETE potrebbe non esserci un body\n    if (options.method === 'HEAD' || response.status === 204) {\n      return null;\n    }\n\n    // Altrimenti, restituisci il JSON\n    return await response.json();\n  } catch (error) {\n    // Cattura errori di rete o altri errori\n    console.error('API call failed:', error);\n    throw error;\n  }\n}\n\n/**\r\n * Metodi helper per diverse tipologie di chiamate\r\n */\nexport const api = {\n  get: (endpoint, options = {}) => fetchApi(endpoint, {\n    ...options,\n    method: 'GET'\n  }),\n  post: (endpoint, data, options = {}) => fetchApi(endpoint, {\n    ...options,\n    method: 'POST',\n    body: JSON.stringify(data)\n  }),\n  put: (endpoint, data, options = {}) => fetchApi(endpoint, {\n    ...options,\n    method: 'PUT',\n    body: JSON.stringify(data)\n  }),\n  delete: (endpoint, options = {}) => fetchApi(endpoint, {\n    ...options,\n    method: 'DELETE'\n  })\n};\nexport default api;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","fetchApi","endpoint","options","headers","url","response","fetch","ok","errorData","json","Error","error","status","statusText","jsonError","method","console","api","get","post","data","body","JSON","stringify","put","delete"],"sources":["C:/Users/Utente/lingua-kai-platform - restructured/src/services/api.js"],"sourcesContent":["/**\r\n * Servizio di base per le chiamate API\r\n */\r\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\r\n\r\n/**\r\n * Wrapper per fetch con gestione degli errori e headers comuni\r\n * @param {string} endpoint - Endpoint API senza il prefisso /api\r\n * @param {Object} options - Opzioni fetch\r\n * @returns {Promise<any>} - Risposta JSON\r\n */\r\nexport async function fetchApi(endpoint, options = {}) {\r\n  // Imposta gli headers di default\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    ...options.headers,\r\n  };\r\n\r\n  // Costruisci l'URL completo\r\n  const url = `${API_URL}/${endpoint}`;\r\n\r\n  try {\r\n    // Esegui la chiamata fetch\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      headers,\r\n    });\r\n\r\n    // Verifica se la risposta è ok (status 200-299)\r\n    if (!response.ok) {\r\n      // Prova a ottenere il messaggio di errore dal JSON se disponibile\r\n      try {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || `Error ${response.status}: ${response.statusText}`);\r\n      } catch (jsonError) {\r\n        // Se non puoi analizzare il JSON, usa un errore generico\r\n        throw new Error(`Error ${response.status}: ${response.statusText}`);\r\n      }\r\n    }\r\n\r\n    // Per richieste HEAD o DELETE potrebbe non esserci un body\r\n    if (options.method === 'HEAD' || response.status === 204) {\r\n      return null;\r\n    }\r\n\r\n    // Altrimenti, restituisci il JSON\r\n    return await response.json();\r\n  } catch (error) {\r\n    // Cattura errori di rete o altri errori\r\n    console.error('API call failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Metodi helper per diverse tipologie di chiamate\r\n */\r\nexport const api = {\r\n  get: (endpoint, options = {}) => \r\n    fetchApi(endpoint, { ...options, method: 'GET' }),\r\n  \r\n  post: (endpoint, data, options = {}) => \r\n    fetchApi(endpoint, { \r\n      ...options, \r\n      method: 'POST', \r\n      body: JSON.stringify(data) \r\n    }),\r\n  \r\n  put: (endpoint, data, options = {}) => \r\n    fetchApi(endpoint, { \r\n      ...options, \r\n      method: 'PUT', \r\n      body: JSON.stringify(data) \r\n    }),\r\n  \r\n  delete: (endpoint, options = {}) => \r\n    fetchApi(endpoint, { ...options, method: 'DELETE' }),\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,MAAM;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,QAAQA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACrD;EACA,MAAMC,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,GAAGD,OAAO,CAACC;EACb,CAAC;;EAED;EACA,MAAMC,GAAG,GAAG,GAAGR,OAAO,IAAIK,QAAQ,EAAE;EAEpC,IAAI;IACF;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;MAChC,GAAGF,OAAO;MACVC;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB;MACA,IAAI;QACF,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,SAASN,QAAQ,CAACO,MAAM,KAAKP,QAAQ,CAACQ,UAAU,EAAE,CAAC;MACxF,CAAC,CAAC,OAAOC,SAAS,EAAE;QAClB;QACA,MAAM,IAAIJ,KAAK,CAAC,SAASL,QAAQ,CAACO,MAAM,KAAKP,QAAQ,CAACQ,UAAU,EAAE,CAAC;MACrE;IACF;;IAEA;IACA,IAAIX,OAAO,CAACa,MAAM,KAAK,MAAM,IAAIV,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;MACxD,OAAO,IAAI;IACb;;IAEA;IACA,OAAO,MAAMP,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd;IACAK,OAAO,CAACL,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAMA,KAAK;EACb;AACF;;AAEA;AACA;AACA;AACA,OAAO,MAAMM,GAAG,GAAG;EACjBC,GAAG,EAAEA,CAACjB,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAC1BF,QAAQ,CAACC,QAAQ,EAAE;IAAE,GAAGC,OAAO;IAAEa,MAAM,EAAE;EAAM,CAAC,CAAC;EAEnDI,IAAI,EAAEA,CAAClB,QAAQ,EAAEmB,IAAI,EAAElB,OAAO,GAAG,CAAC,CAAC,KACjCF,QAAQ,CAACC,QAAQ,EAAE;IACjB,GAAGC,OAAO;IACVa,MAAM,EAAE,MAAM;IACdM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;EAC3B,CAAC,CAAC;EAEJI,GAAG,EAAEA,CAACvB,QAAQ,EAAEmB,IAAI,EAAElB,OAAO,GAAG,CAAC,CAAC,KAChCF,QAAQ,CAACC,QAAQ,EAAE;IACjB,GAAGC,OAAO;IACVa,MAAM,EAAE,KAAK;IACbM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;EAC3B,CAAC,CAAC;EAEJK,MAAM,EAAEA,CAACxB,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAC7BF,QAAQ,CAACC,QAAQ,EAAE;IAAE,GAAGC,OAAO;IAAEa,MAAM,EAAE;EAAS,CAAC;AACvD,CAAC;AAED,eAAeE,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}